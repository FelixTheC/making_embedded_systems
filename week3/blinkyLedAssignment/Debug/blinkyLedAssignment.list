
blinkyLedAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001674  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08001804  08001804  00011804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800190c  0800190c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800190c  0800190c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800190c  0800190c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800190c  0800190c  0001190c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001914  08001914  00011914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000170  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001eba  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000708  00000000  00000000  00021f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a0  00000000  00000000  00022698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000124  00000000  00000000  00022838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017f30  00000000  00000000  0002295c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001840  00000000  00000000  0003a88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0007a86e  00000000  00000000  0003c0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000ea4  00000000  00000000  000b693c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000b77e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080017ec 	.word	0x080017ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080017ec 	.word	0x080017ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	; (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <_Z15enable_user_ledv>:

const uint8_t BSRR_RESET_OFFSET = 16;

/// @brief set User LED's (LD3-LD10)[PIN's 8-15] to output mode
void enable_user_led() noexcept
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
    GPIOE->MODER |= reg::GPIO_E::AHB2_GPIOE_MODER_15_OUT;
 8000304:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <_Z15enable_user_ledv+0x70>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a19      	ldr	r2, [pc, #100]	; (8000370 <_Z15enable_user_ledv+0x70>)
 800030a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800030e:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= reg::GPIO_E::AHB2_GPIOE_MODER_14_OUT;
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <_Z15enable_user_ledv+0x70>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a16      	ldr	r2, [pc, #88]	; (8000370 <_Z15enable_user_ledv+0x70>)
 8000316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800031a:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= reg::GPIO_E::AHB2_GPIOE_MODER_13_OUT;
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <_Z15enable_user_ledv+0x70>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a13      	ldr	r2, [pc, #76]	; (8000370 <_Z15enable_user_ledv+0x70>)
 8000322:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000326:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= reg::GPIO_E::AHB2_GPIOE_MODER_12_OUT;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <_Z15enable_user_ledv+0x70>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a10      	ldr	r2, [pc, #64]	; (8000370 <_Z15enable_user_ledv+0x70>)
 800032e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000332:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= reg::GPIO_E::AHB2_GPIOE_MODER_11_OUT;
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <_Z15enable_user_ledv+0x70>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <_Z15enable_user_ledv+0x70>)
 800033a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800033e:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= reg::GPIO_E::AHB2_GPIOE_MODER_10_OUT;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <_Z15enable_user_ledv+0x70>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <_Z15enable_user_ledv+0x70>)
 8000346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800034a:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= reg::GPIO_E::AHB2_GPIOE_MODER_09_OUT;
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <_Z15enable_user_ledv+0x70>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <_Z15enable_user_ledv+0x70>)
 8000352:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000356:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= reg::GPIO_E::AHB2_GPIOE_MODER_08_OUT;
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <_Z15enable_user_ledv+0x70>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <_Z15enable_user_ledv+0x70>)
 800035e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000362:	6013      	str	r3, [r2, #0]
    
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	48001000 	.word	0x48001000

08000374 <_Z12set_gpio_pinh>:

/// @brief Sets the corresponding ODRx bit
/// @param pin can be a value between 0 - 15
void set_gpio_pin(uint8_t pin) noexcept
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
    assert((0U <= pin && pin <= 15U) && "pin can be a value between 0 - 15");
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b0f      	cmp	r3, #15
 8000382:	d905      	bls.n	8000390 <_Z12set_gpio_pinh+0x1c>
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <_Z12set_gpio_pinh+0x38>)
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <_Z12set_gpio_pinh+0x3c>)
 8000388:	2120      	movs	r1, #32
 800038a:	480a      	ldr	r0, [pc, #40]	; (80003b4 <_Z12set_gpio_pinh+0x40>)
 800038c:	f000 fa8e 	bl	80008ac <__assert_func>
    GPIOE->BSRR |= (1U << pin);
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <_Z12set_gpio_pinh+0x44>)
 8000392:	699a      	ldr	r2, [r3, #24]
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	2101      	movs	r1, #1
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	4906      	ldr	r1, [pc, #24]	; (80003b8 <_Z12set_gpio_pinh+0x44>)
 800039e:	4313      	orrs	r3, r2
 80003a0:	618b      	str	r3, [r1, #24]
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	08001804 	.word	0x08001804
 80003b0:	08001848 	.word	0x08001848
 80003b4:	08001864 	.word	0x08001864
 80003b8:	48001000 	.word	0x48001000

080003bc <_Z14reset_gpio_pinh>:

/// @brief Resets the corresponding ODRx bit
/// @param pin can be a value between 0 - 15
void reset_gpio_pin(uint8_t pin) noexcept
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
    assert((0U <= pin && pin <= 15U) && "pin can be a value between 0 - 15");
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2b0f      	cmp	r3, #15
 80003ca:	d905      	bls.n	80003d8 <_Z14reset_gpio_pinh+0x1c>
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <_Z14reset_gpio_pinh+0x38>)
 80003ce:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <_Z14reset_gpio_pinh+0x3c>)
 80003d0:	2128      	movs	r1, #40	; 0x28
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <_Z14reset_gpio_pinh+0x40>)
 80003d4:	f000 fa6a 	bl	80008ac <__assert_func>
    GPIOE->BSRR |= (1U << (pin + BSRR_RESET_OFFSET));
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <_Z14reset_gpio_pinh+0x44>)
 80003da:	699a      	ldr	r2, [r3, #24]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3310      	adds	r3, #16
 80003e0:	2101      	movs	r1, #1
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	4906      	ldr	r1, [pc, #24]	; (8000400 <_Z14reset_gpio_pinh+0x44>)
 80003e8:	4313      	orrs	r3, r2
 80003ea:	618b      	str	r3, [r1, #24]
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	08001804 	.word	0x08001804
 80003f8:	08001880 	.word	0x08001880
 80003fc:	08001864 	.word	0x08001864
 8000400:	48001000 	.word	0x48001000

08000404 <_Z10switch_ledhb>:

void switch_led(uint8_t pin, bool on) noexcept
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	460a      	mov	r2, r1
 800040e:	71fb      	strb	r3, [r7, #7]
 8000410:	4613      	mov	r3, r2
 8000412:	71bb      	strb	r3, [r7, #6]
    if (on)
 8000414:	79bb      	ldrb	r3, [r7, #6]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d004      	beq.n	8000424 <_Z10switch_ledhb+0x20>
    {
        set_gpio_pin(pin);
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ffa9 	bl	8000374 <_Z12set_gpio_pinh>
    }
    else
    {
        reset_gpio_pin(pin);
    }
}
 8000422:	e003      	b.n	800042c <_Z10switch_ledhb+0x28>
        reset_gpio_pin(pin);
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ffc8 	bl	80003bc <_Z14reset_gpio_pinh>
}
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <_ZN9BlinkyLEDC1Ehh>:
    uint8_t _min_pin = 0;
    uint8_t _max_pin = 0;
    uint8_t _current_pin = 0;
    bool turn_on = false;
    
    BlinkyLED(uint8_t min_pin, uint8_t max_pin) : _min_pin(min_pin), _max_pin(max_pin), _current_pin(min_pin) {}
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	70fb      	strb	r3, [r7, #3]
 8000440:	4613      	mov	r3, r2
 8000442:	70bb      	strb	r3, [r7, #2]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	78fa      	ldrb	r2, [r7, #3]
 8000448:	701a      	strb	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	78ba      	ldrb	r2, [r7, #2]
 800044e:	705a      	strb	r2, [r3, #1]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	78fa      	ldrb	r2, [r7, #3]
 8000454:	709a      	strb	r2, [r3, #2]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2200      	movs	r2, #0
 800045a:	70da      	strb	r2, [r3, #3]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <_ZN9BlinkyLED4tickEv>:
    ~BlinkyLED() = default;
    
    [[nodiscard ]] bool tick() noexcept
 800046a:	b580      	push	{r7, lr}
 800046c:	b082      	sub	sp, #8
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
    {
        if (_current_pin <= _max_pin)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	789a      	ldrb	r2, [r3, #2]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	785b      	ldrb	r3, [r3, #1]
 800047a:	429a      	cmp	r2, r3
 800047c:	d80f      	bhi.n	800049e <_ZN9BlinkyLED4tickEv+0x34>
        {
            switch_led(_current_pin, turn_on);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	789a      	ldrb	r2, [r3, #2]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	78db      	ldrb	r3, [r3, #3]
 8000486:	4619      	mov	r1, r3
 8000488:	4610      	mov	r0, r2
 800048a:	f7ff ffbb 	bl	8000404 <_Z10switch_ledhb>
            ++_current_pin;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	789b      	ldrb	r3, [r3, #2]
 8000492:	3301      	adds	r3, #1
 8000494:	b2da      	uxtb	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	709a      	strb	r2, [r3, #2]
            return true;
 800049a:	2301      	movs	r3, #1
 800049c:	e000      	b.n	80004a0 <_ZN9BlinkyLED4tickEv+0x36>
        }
        else
        {
            return false;
 800049e:	2300      	movs	r3, #0
        }
    }
 80004a0:	4618      	mov	r0, r3
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <_ZN9BlinkyLED12disable_ledsEv>:
    
    void disable_leds() noexcept
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
    {
        _current_pin = _min_pin;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	781a      	ldrb	r2, [r3, #0]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	709a      	strb	r2, [r3, #2]
        
        for(uint32_t pin_no = _min_pin; pin_no <= _max_pin; ++pin_no)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	e00a      	b.n	80004d6 <_ZN9BlinkyLED12disable_ledsEv+0x2e>
        {
            switch_led(pin_no, turn_on);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	78db      	ldrb	r3, [r3, #3]
 80004c8:	4619      	mov	r1, r3
 80004ca:	4610      	mov	r0, r2
 80004cc:	f7ff ff9a 	bl	8000404 <_Z10switch_ledhb>
        for(uint32_t pin_no = _min_pin; pin_no <= _max_pin; ++pin_no)
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	785b      	ldrb	r3, [r3, #1]
 80004da:	461a      	mov	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4293      	cmp	r3, r2
 80004e0:	d9ee      	bls.n	80004c0 <_ZN9BlinkyLED12disable_ledsEv+0x18>
        }
    }
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3710      	adds	r7, #16
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <_Z18enable_user_buttonv>:
#include "stm32f303xc.h"


/// @brief User Button is in GPIO_A Pin 0
void enable_user_button() noexcept
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
    __disable_irq();
    
    // set `pin 0` to input mode
    GPIOA->MODER |= 0x00;
 80004f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	6013      	str	r3, [r2, #0]
    
    // SYSCFG clock enable
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <_Z18enable_user_buttonv+0x58>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <_Z18enable_user_buttonv+0x58>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6193      	str	r3, [r2, #24]
    
    // Enable EXTI0 on SYSCFG
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <_Z18enable_user_buttonv+0x5c>)
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <_Z18enable_user_buttonv+0x5c>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	6093      	str	r3, [r2, #8]

    // Unmask EXTI0
    EXTI->IMR |= (1<<0);
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <_Z18enable_user_buttonv+0x60>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0c      	ldr	r2, [pc, #48]	; (800054c <_Z18enable_user_buttonv+0x60>)
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6013      	str	r3, [r2, #0]

    // Falling trigger enabled for EXTI0
    EXTI->FTSR |= (1<<0);
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <_Z18enable_user_buttonv+0x60>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <_Z18enable_user_buttonv+0x60>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	60d3      	str	r3, [r2, #12]

    // Enable EXTI0 in NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 800052c:	2006      	movs	r0, #6
 800052e:	f7ff fe9f 	bl	8000270 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI0_IRQn, 0);
 8000532:	2100      	movs	r1, #0
 8000534:	2006      	movs	r0, #6
 8000536:	f7ff feb9 	bl	80002ac <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800053a:	b662      	cpsie	i
}
 800053c:	bf00      	nop
    
    __enable_irq();
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000
 8000548:	40010000 	.word	0x40010000
 800054c:	40010400 	.word	0x40010400

08000550 <_Z23enable_interrupt_timer2v>:

#include "stm32f303xc.h"


void enable_interrupt_timer2() noexcept
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <_Z23enable_interrupt_timer2v+0x48>)
 8000556:	69db      	ldr	r3, [r3, #28]
 8000558:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <_Z23enable_interrupt_timer2v+0x48>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	61d3      	str	r3, [r2, #28]
    
    // Set prescaler value
    TIM2->PSC = 320 - 1;
 8000560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000564:	f240 123f 	movw	r2, #319	; 0x13f
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
    
    // Set auto-reload value
    TIM2->ARR = 10000 - 1;
 800056a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000572:	62da      	str	r2, [r3, #44]	; 0x2c
    
    // Clear counter
    TIM2->CNT = 0;
 8000574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000578:	2200      	movs	r2, #0
 800057a:	625a      	str	r2, [r3, #36]	; 0x24
    
    // Enable TIM interrupt for update event
    TIM2->DIER |= TIM_DIER_UIE;
 800057c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	60d3      	str	r3, [r2, #12]
    
    // Enable TIM interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 800058c:	201c      	movs	r0, #28
 800058e:	f7ff fe6f 	bl	8000270 <__NVIC_EnableIRQ>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <_Z13enable_timer2v>:

void enable_timer2()
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
    TIM2->CR1 = TIM_CR1_CEN;
 80005a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <_Z14disable_timer2v>:

void disable_timer2()
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
    TIM2->CR1 &= ~TIM_CR1_CEN;
 80005b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c0:	f023 0301 	bic.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <main>:
void enable_ahb_clock() noexcept;

BlinkyLED blinkyLed(8, 15);

int main()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    enable_ahb_clock();
 80005d4:	f000 f808 	bl	80005e8 <_Z16enable_ahb_clockv>
    enable_interrupt_timer2();
 80005d8:	f7ff ffba 	bl	8000550 <_Z23enable_interrupt_timer2v>
    enable_user_button();
 80005dc:	f7ff ff86 	bl	80004ec <_Z18enable_user_buttonv>
	enable_user_led();
 80005e0:	f7ff fe8e 	bl	8000300 <_Z15enable_user_ledv>
 
	while(1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x14>
	...

080005e8 <_Z16enable_ahb_clockv>:
    return EXIT_SUCCESS;
}

/// @brief Enable the clock/bus on the AHB line
void enable_ahb_clock() noexcept
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
    // Enable clock for GPIO_A
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <_Z16enable_ahb_clockv+0x28>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <_Z16enable_ahb_clockv+0x28>)
 80005f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f6:	6153      	str	r3, [r2, #20]
    
    // Enable clock for GPIO_E
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <_Z16enable_ahb_clockv+0x28>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <_Z16enable_ahb_clockv+0x28>)
 80005fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000602:	6153      	str	r3, [r2, #20]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <EXTI0_IRQHandler>:

/// @brief Interrupt service routine
/// can be found in g_pfnVectors in file startup_stm32f303vctx.s
extern "C"
void EXTI0_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    // check if interrupt was raised by PIN 0
    if ((EXTI->PR & 0x01) != 0)
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <EXTI0_IRQHandler+0x34>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf14      	ite	ne
 8000624:	2301      	movne	r3, #1
 8000626:	2300      	moveq	r3, #0
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00a      	beq.n	8000644 <EXTI0_IRQHandler+0x30>
    {
        // clear PR flag
        EXTI->PR |= 0x01;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <EXTI0_IRQHandler+0x34>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <EXTI0_IRQHandler+0x34>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6153      	str	r3, [r2, #20]
        enable_timer2();
 800063a:	f7ff ffaf 	bl	800059c <_Z13enable_timer2v>
        
        blinkyLed.turn_on = true;
 800063e:	4b03      	ldr	r3, [pc, #12]	; (800064c <EXTI0_IRQHandler+0x38>)
 8000640:	2201      	movs	r2, #1
 8000642:	70da      	strb	r2, [r3, #3]
    }
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40010400 	.word	0x40010400
 800064c:	20000078 	.word	0x20000078

08000650 <TIM2_IRQHandler>:

extern "C"
void TIM2_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    // clear update interrupt flag
    TIM2->SR &= ~TIM_DIER_UIE;
 8000654:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000658:	691b      	ldr	r3, [r3, #16]
 800065a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800065e:	f023 0301 	bic.w	r3, r3, #1
 8000662:	6113      	str	r3, [r2, #16]
    
    if (!blinkyLed.tick())
 8000664:	4809      	ldr	r0, [pc, #36]	; (800068c <TIM2_IRQHandler+0x3c>)
 8000666:	f7ff ff00 	bl	800046a <_ZN9BlinkyLED4tickEv>
 800066a:	4603      	mov	r3, r0
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d007      	beq.n	8000686 <TIM2_IRQHandler+0x36>
    {
		// Disable timer
        disable_timer2();
 8000676:	f7ff ff9c 	bl	80005b2 <_Z14disable_timer2v>
        
        blinkyLed.turn_on = false;
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <TIM2_IRQHandler+0x3c>)
 800067c:	2200      	movs	r2, #0
 800067e:	70da      	strb	r2, [r3, #3]
        blinkyLed.switch_leds();
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <TIM2_IRQHandler+0x3c>)
 8000682:	f7ff ff11 	bl	80004a8 <_ZN9BlinkyLED12disable_ledsEv>
    }
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000078 	.word	0x20000078

08000690 <_Z41__static_initialization_and_destruction_0ii>:
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d109      	bne.n	80006b4 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d104      	bne.n	80006b4 <_Z41__static_initialization_and_destruction_0ii+0x24>
BlinkyLED blinkyLed(8, 15);
 80006aa:	220f      	movs	r2, #15
 80006ac:	2108      	movs	r1, #8
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80006b0:	f7ff fec0 	bl	8000434 <_ZN9BlinkyLEDC1Ehh>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000078 	.word	0x20000078

080006c0 <_GLOBAL__sub_I__Z15enable_user_ledv>:
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff ffe1 	bl	8000690 <_Z41__static_initialization_and_destruction_0ii>
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return 1;
 80006d4:	2301      	movs	r3, #1
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <_kill>:

int _kill(int pid, int sig)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80006ea:	f000 fa63 	bl	8000bb4 <__errno>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2216      	movs	r2, #22
 80006f2:	601a      	str	r2, [r3, #0]
  return -1;
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <_exit>:

void _exit (int status)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ffe7 	bl	80006e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000712:	e7fe      	b.n	8000712 <_exit+0x12>

08000714 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	e00a      	b.n	800073c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000726:	f3af 8000 	nop.w
 800072a:	4601      	mov	r1, r0
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	60ba      	str	r2, [r7, #8]
 8000732:	b2ca      	uxtb	r2, r1
 8000734:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	3301      	adds	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697a      	ldr	r2, [r7, #20]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	dbf0      	blt.n	8000726 <_read+0x12>
  }

  return len;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	e009      	b.n	8000774 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	60ba      	str	r2, [r7, #8]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	3301      	adds	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	429a      	cmp	r2, r3
 800077a:	dbf1      	blt.n	8000760 <_write+0x12>
  }
  return len;
 800077c:	687b      	ldr	r3, [r7, #4]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_close>:

int _close(int file)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ae:	605a      	str	r2, [r3, #4]
  return 0;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <_isatty>:

int _isatty(int file)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <_sbrk+0x5c>)
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <_sbrk+0x60>)
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <_sbrk+0x64>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <_sbrk+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	429a      	cmp	r2, r3
 800081e:	d207      	bcs.n	8000830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000820:	f000 f9c8 	bl	8000bb4 <__errno>
 8000824:	4603      	mov	r3, r0
 8000826:	220c      	movs	r2, #12
 8000828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082e:	e009      	b.n	8000844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <_sbrk+0x64>)
 8000840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000a000 	.word	0x2000a000
 8000850:	00000400 	.word	0x00000400
 8000854:	2000007c 	.word	0x2000007c
 8000858:	200001d0 	.word	0x200001d0

0800085c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800085c:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000890 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/


/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	; (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	; (800089c <LoopForever+0xe>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	; (80008a4 <LoopForever+0x16>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f000 f99b 	bl	8000bc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fea1 	bl	80005d0 <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000890:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800089c:	08001918 	.word	0x08001918
  ldr r2, =_sbss
 80008a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008a4:	200001cc 	.word	0x200001cc

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <__assert_func>:
 80008ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80008ae:	4614      	mov	r4, r2
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <__assert_func+0x2c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4605      	mov	r5, r0
 80008b8:	68d8      	ldr	r0, [r3, #12]
 80008ba:	b14c      	cbz	r4, 80008d0 <__assert_func+0x24>
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <__assert_func+0x30>)
 80008be:	9100      	str	r1, [sp, #0]
 80008c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <__assert_func+0x34>)
 80008c6:	462b      	mov	r3, r5
 80008c8:	f000 f8b2 	bl	8000a30 <fiprintf>
 80008cc:	f000 f99f 	bl	8000c0e <abort>
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__assert_func+0x38>)
 80008d2:	461c      	mov	r4, r3
 80008d4:	e7f3      	b.n	80008be <__assert_func+0x12>
 80008d6:	bf00      	nop
 80008d8:	20000058 	.word	0x20000058
 80008dc:	0800189d 	.word	0x0800189d
 80008e0:	080018aa 	.word	0x080018aa
 80008e4:	080018d8 	.word	0x080018d8

080008e8 <std>:
 80008e8:	2300      	movs	r3, #0
 80008ea:	b510      	push	{r4, lr}
 80008ec:	4604      	mov	r4, r0
 80008ee:	e9c0 3300 	strd	r3, r3, [r0]
 80008f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008f6:	6083      	str	r3, [r0, #8]
 80008f8:	8181      	strh	r1, [r0, #12]
 80008fa:	6643      	str	r3, [r0, #100]	; 0x64
 80008fc:	81c2      	strh	r2, [r0, #14]
 80008fe:	6183      	str	r3, [r0, #24]
 8000900:	4619      	mov	r1, r3
 8000902:	2208      	movs	r2, #8
 8000904:	305c      	adds	r0, #92	; 0x5c
 8000906:	f000 f906 	bl	8000b16 <memset>
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <std+0x58>)
 800090c:	6263      	str	r3, [r4, #36]	; 0x24
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <std+0x5c>)
 8000910:	62a3      	str	r3, [r4, #40]	; 0x28
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <std+0x60>)
 8000914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <std+0x64>)
 8000918:	6323      	str	r3, [r4, #48]	; 0x30
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <std+0x68>)
 800091c:	6224      	str	r4, [r4, #32]
 800091e:	429c      	cmp	r4, r3
 8000920:	d006      	beq.n	8000930 <std+0x48>
 8000922:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000926:	4294      	cmp	r4, r2
 8000928:	d002      	beq.n	8000930 <std+0x48>
 800092a:	33d0      	adds	r3, #208	; 0xd0
 800092c:	429c      	cmp	r4, r3
 800092e:	d105      	bne.n	800093c <std+0x54>
 8000930:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000938:	f000 b966 	b.w	8000c08 <__retarget_lock_init_recursive>
 800093c:	bd10      	pop	{r4, pc}
 800093e:	bf00      	nop
 8000940:	08000a91 	.word	0x08000a91
 8000944:	08000ab3 	.word	0x08000ab3
 8000948:	08000aeb 	.word	0x08000aeb
 800094c:	08000b0f 	.word	0x08000b0f
 8000950:	20000080 	.word	0x20000080

08000954 <stdio_exit_handler>:
 8000954:	4a02      	ldr	r2, [pc, #8]	; (8000960 <stdio_exit_handler+0xc>)
 8000956:	4903      	ldr	r1, [pc, #12]	; (8000964 <stdio_exit_handler+0x10>)
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <stdio_exit_handler+0x14>)
 800095a:	f000 b87b 	b.w	8000a54 <_fwalk_sglue>
 800095e:	bf00      	nop
 8000960:	20000000 	.word	0x20000000
 8000964:	080014c1 	.word	0x080014c1
 8000968:	2000000c 	.word	0x2000000c

0800096c <cleanup_stdio>:
 800096c:	6841      	ldr	r1, [r0, #4]
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <cleanup_stdio+0x34>)
 8000970:	4299      	cmp	r1, r3
 8000972:	b510      	push	{r4, lr}
 8000974:	4604      	mov	r4, r0
 8000976:	d001      	beq.n	800097c <cleanup_stdio+0x10>
 8000978:	f000 fda2 	bl	80014c0 <_fflush_r>
 800097c:	68a1      	ldr	r1, [r4, #8]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <cleanup_stdio+0x38>)
 8000980:	4299      	cmp	r1, r3
 8000982:	d002      	beq.n	800098a <cleanup_stdio+0x1e>
 8000984:	4620      	mov	r0, r4
 8000986:	f000 fd9b 	bl	80014c0 <_fflush_r>
 800098a:	68e1      	ldr	r1, [r4, #12]
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <cleanup_stdio+0x3c>)
 800098e:	4299      	cmp	r1, r3
 8000990:	d004      	beq.n	800099c <cleanup_stdio+0x30>
 8000992:	4620      	mov	r0, r4
 8000994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000998:	f000 bd92 	b.w	80014c0 <_fflush_r>
 800099c:	bd10      	pop	{r4, pc}
 800099e:	bf00      	nop
 80009a0:	20000080 	.word	0x20000080
 80009a4:	200000e8 	.word	0x200000e8
 80009a8:	20000150 	.word	0x20000150

080009ac <global_stdio_init.part.0>:
 80009ac:	b510      	push	{r4, lr}
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <global_stdio_init.part.0+0x30>)
 80009b0:	4c0b      	ldr	r4, [pc, #44]	; (80009e0 <global_stdio_init.part.0+0x34>)
 80009b2:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <global_stdio_init.part.0+0x38>)
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	4620      	mov	r0, r4
 80009b8:	2200      	movs	r2, #0
 80009ba:	2104      	movs	r1, #4
 80009bc:	f7ff ff94 	bl	80008e8 <std>
 80009c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80009c4:	2201      	movs	r2, #1
 80009c6:	2109      	movs	r1, #9
 80009c8:	f7ff ff8e 	bl	80008e8 <std>
 80009cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80009d0:	2202      	movs	r2, #2
 80009d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009d6:	2112      	movs	r1, #18
 80009d8:	f7ff bf86 	b.w	80008e8 <std>
 80009dc:	200001b8 	.word	0x200001b8
 80009e0:	20000080 	.word	0x20000080
 80009e4:	08000955 	.word	0x08000955

080009e8 <__sfp_lock_acquire>:
 80009e8:	4801      	ldr	r0, [pc, #4]	; (80009f0 <__sfp_lock_acquire+0x8>)
 80009ea:	f000 b90e 	b.w	8000c0a <__retarget_lock_acquire_recursive>
 80009ee:	bf00      	nop
 80009f0:	200001c1 	.word	0x200001c1

080009f4 <__sfp_lock_release>:
 80009f4:	4801      	ldr	r0, [pc, #4]	; (80009fc <__sfp_lock_release+0x8>)
 80009f6:	f000 b909 	b.w	8000c0c <__retarget_lock_release_recursive>
 80009fa:	bf00      	nop
 80009fc:	200001c1 	.word	0x200001c1

08000a00 <__sinit>:
 8000a00:	b510      	push	{r4, lr}
 8000a02:	4604      	mov	r4, r0
 8000a04:	f7ff fff0 	bl	80009e8 <__sfp_lock_acquire>
 8000a08:	6a23      	ldr	r3, [r4, #32]
 8000a0a:	b11b      	cbz	r3, 8000a14 <__sinit+0x14>
 8000a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a10:	f7ff bff0 	b.w	80009f4 <__sfp_lock_release>
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__sinit+0x28>)
 8000a16:	6223      	str	r3, [r4, #32]
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__sinit+0x2c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f5      	bne.n	8000a0c <__sinit+0xc>
 8000a20:	f7ff ffc4 	bl	80009ac <global_stdio_init.part.0>
 8000a24:	e7f2      	b.n	8000a0c <__sinit+0xc>
 8000a26:	bf00      	nop
 8000a28:	0800096d 	.word	0x0800096d
 8000a2c:	200001b8 	.word	0x200001b8

08000a30 <fiprintf>:
 8000a30:	b40e      	push	{r1, r2, r3}
 8000a32:	b503      	push	{r0, r1, lr}
 8000a34:	4601      	mov	r1, r0
 8000a36:	ab03      	add	r3, sp, #12
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <fiprintf+0x20>)
 8000a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a3e:	6800      	ldr	r0, [r0, #0]
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	f000 fa0d 	bl	8000e60 <_vfiprintf_r>
 8000a46:	b002      	add	sp, #8
 8000a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a4c:	b003      	add	sp, #12
 8000a4e:	4770      	bx	lr
 8000a50:	20000058 	.word	0x20000058

08000a54 <_fwalk_sglue>:
 8000a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a58:	4607      	mov	r7, r0
 8000a5a:	4688      	mov	r8, r1
 8000a5c:	4614      	mov	r4, r2
 8000a5e:	2600      	movs	r6, #0
 8000a60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a64:	f1b9 0901 	subs.w	r9, r9, #1
 8000a68:	d505      	bpl.n	8000a76 <_fwalk_sglue+0x22>
 8000a6a:	6824      	ldr	r4, [r4, #0]
 8000a6c:	2c00      	cmp	r4, #0
 8000a6e:	d1f7      	bne.n	8000a60 <_fwalk_sglue+0xc>
 8000a70:	4630      	mov	r0, r6
 8000a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a76:	89ab      	ldrh	r3, [r5, #12]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d907      	bls.n	8000a8c <_fwalk_sglue+0x38>
 8000a7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a80:	3301      	adds	r3, #1
 8000a82:	d003      	beq.n	8000a8c <_fwalk_sglue+0x38>
 8000a84:	4629      	mov	r1, r5
 8000a86:	4638      	mov	r0, r7
 8000a88:	47c0      	blx	r8
 8000a8a:	4306      	orrs	r6, r0
 8000a8c:	3568      	adds	r5, #104	; 0x68
 8000a8e:	e7e9      	b.n	8000a64 <_fwalk_sglue+0x10>

08000a90 <__sread>:
 8000a90:	b510      	push	{r4, lr}
 8000a92:	460c      	mov	r4, r1
 8000a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a98:	f000 f868 	bl	8000b6c <_read_r>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	bfab      	itete	ge
 8000aa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8000aa4:	181b      	addge	r3, r3, r0
 8000aa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000aaa:	bfac      	ite	ge
 8000aac:	6563      	strge	r3, [r4, #84]	; 0x54
 8000aae:	81a3      	strhlt	r3, [r4, #12]
 8000ab0:	bd10      	pop	{r4, pc}

08000ab2 <__swrite>:
 8000ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ab6:	461f      	mov	r7, r3
 8000ab8:	898b      	ldrh	r3, [r1, #12]
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	4605      	mov	r5, r0
 8000abe:	460c      	mov	r4, r1
 8000ac0:	4616      	mov	r6, r2
 8000ac2:	d505      	bpl.n	8000ad0 <__swrite+0x1e>
 8000ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ac8:	2302      	movs	r3, #2
 8000aca:	2200      	movs	r2, #0
 8000acc:	f000 f83c 	bl	8000b48 <_lseek_r>
 8000ad0:	89a3      	ldrh	r3, [r4, #12]
 8000ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ada:	81a3      	strh	r3, [r4, #12]
 8000adc:	4632      	mov	r2, r6
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae6:	f000 b853 	b.w	8000b90 <_write_r>

08000aea <__sseek>:
 8000aea:	b510      	push	{r4, lr}
 8000aec:	460c      	mov	r4, r1
 8000aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000af2:	f000 f829 	bl	8000b48 <_lseek_r>
 8000af6:	1c43      	adds	r3, r0, #1
 8000af8:	89a3      	ldrh	r3, [r4, #12]
 8000afa:	bf15      	itete	ne
 8000afc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000afe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000b02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000b06:	81a3      	strheq	r3, [r4, #12]
 8000b08:	bf18      	it	ne
 8000b0a:	81a3      	strhne	r3, [r4, #12]
 8000b0c:	bd10      	pop	{r4, pc}

08000b0e <__sclose>:
 8000b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b12:	f000 b809 	b.w	8000b28 <_close_r>

08000b16 <memset>:
 8000b16:	4402      	add	r2, r0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d100      	bne.n	8000b20 <memset+0xa>
 8000b1e:	4770      	bx	lr
 8000b20:	f803 1b01 	strb.w	r1, [r3], #1
 8000b24:	e7f9      	b.n	8000b1a <memset+0x4>
	...

08000b28 <_close_r>:
 8000b28:	b538      	push	{r3, r4, r5, lr}
 8000b2a:	4d06      	ldr	r5, [pc, #24]	; (8000b44 <_close_r+0x1c>)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4608      	mov	r0, r1
 8000b32:	602b      	str	r3, [r5, #0]
 8000b34:	f7ff fe27 	bl	8000786 <_close>
 8000b38:	1c43      	adds	r3, r0, #1
 8000b3a:	d102      	bne.n	8000b42 <_close_r+0x1a>
 8000b3c:	682b      	ldr	r3, [r5, #0]
 8000b3e:	b103      	cbz	r3, 8000b42 <_close_r+0x1a>
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	bd38      	pop	{r3, r4, r5, pc}
 8000b44:	200001bc 	.word	0x200001bc

08000b48 <_lseek_r>:
 8000b48:	b538      	push	{r3, r4, r5, lr}
 8000b4a:	4d07      	ldr	r5, [pc, #28]	; (8000b68 <_lseek_r+0x20>)
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	4611      	mov	r1, r2
 8000b52:	2200      	movs	r2, #0
 8000b54:	602a      	str	r2, [r5, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	f7ff fe3c 	bl	80007d4 <_lseek>
 8000b5c:	1c43      	adds	r3, r0, #1
 8000b5e:	d102      	bne.n	8000b66 <_lseek_r+0x1e>
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	b103      	cbz	r3, 8000b66 <_lseek_r+0x1e>
 8000b64:	6023      	str	r3, [r4, #0]
 8000b66:	bd38      	pop	{r3, r4, r5, pc}
 8000b68:	200001bc 	.word	0x200001bc

08000b6c <_read_r>:
 8000b6c:	b538      	push	{r3, r4, r5, lr}
 8000b6e:	4d07      	ldr	r5, [pc, #28]	; (8000b8c <_read_r+0x20>)
 8000b70:	4604      	mov	r4, r0
 8000b72:	4608      	mov	r0, r1
 8000b74:	4611      	mov	r1, r2
 8000b76:	2200      	movs	r2, #0
 8000b78:	602a      	str	r2, [r5, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	f7ff fdca 	bl	8000714 <_read>
 8000b80:	1c43      	adds	r3, r0, #1
 8000b82:	d102      	bne.n	8000b8a <_read_r+0x1e>
 8000b84:	682b      	ldr	r3, [r5, #0]
 8000b86:	b103      	cbz	r3, 8000b8a <_read_r+0x1e>
 8000b88:	6023      	str	r3, [r4, #0]
 8000b8a:	bd38      	pop	{r3, r4, r5, pc}
 8000b8c:	200001bc 	.word	0x200001bc

08000b90 <_write_r>:
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4d07      	ldr	r5, [pc, #28]	; (8000bb0 <_write_r+0x20>)
 8000b94:	4604      	mov	r4, r0
 8000b96:	4608      	mov	r0, r1
 8000b98:	4611      	mov	r1, r2
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	602a      	str	r2, [r5, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	f7ff fdd5 	bl	800074e <_write>
 8000ba4:	1c43      	adds	r3, r0, #1
 8000ba6:	d102      	bne.n	8000bae <_write_r+0x1e>
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	b103      	cbz	r3, 8000bae <_write_r+0x1e>
 8000bac:	6023      	str	r3, [r4, #0]
 8000bae:	bd38      	pop	{r3, r4, r5, pc}
 8000bb0:	200001bc 	.word	0x200001bc

08000bb4 <__errno>:
 8000bb4:	4b01      	ldr	r3, [pc, #4]	; (8000bbc <__errno+0x8>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000058 	.word	0x20000058

08000bc0 <__libc_init_array>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	4d0d      	ldr	r5, [pc, #52]	; (8000bf8 <__libc_init_array+0x38>)
 8000bc4:	4c0d      	ldr	r4, [pc, #52]	; (8000bfc <__libc_init_array+0x3c>)
 8000bc6:	1b64      	subs	r4, r4, r5
 8000bc8:	10a4      	asrs	r4, r4, #2
 8000bca:	2600      	movs	r6, #0
 8000bcc:	42a6      	cmp	r6, r4
 8000bce:	d109      	bne.n	8000be4 <__libc_init_array+0x24>
 8000bd0:	4d0b      	ldr	r5, [pc, #44]	; (8000c00 <__libc_init_array+0x40>)
 8000bd2:	4c0c      	ldr	r4, [pc, #48]	; (8000c04 <__libc_init_array+0x44>)
 8000bd4:	f000 fe0a 	bl	80017ec <_init>
 8000bd8:	1b64      	subs	r4, r4, r5
 8000bda:	10a4      	asrs	r4, r4, #2
 8000bdc:	2600      	movs	r6, #0
 8000bde:	42a6      	cmp	r6, r4
 8000be0:	d105      	bne.n	8000bee <__libc_init_array+0x2e>
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000be8:	4798      	blx	r3
 8000bea:	3601      	adds	r6, #1
 8000bec:	e7ee      	b.n	8000bcc <__libc_init_array+0xc>
 8000bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bf2:	4798      	blx	r3
 8000bf4:	3601      	adds	r6, #1
 8000bf6:	e7f2      	b.n	8000bde <__libc_init_array+0x1e>
 8000bf8:	0800190c 	.word	0x0800190c
 8000bfc:	0800190c 	.word	0x0800190c
 8000c00:	0800190c 	.word	0x0800190c
 8000c04:	08001914 	.word	0x08001914

08000c08 <__retarget_lock_init_recursive>:
 8000c08:	4770      	bx	lr

08000c0a <__retarget_lock_acquire_recursive>:
 8000c0a:	4770      	bx	lr

08000c0c <__retarget_lock_release_recursive>:
 8000c0c:	4770      	bx	lr

08000c0e <abort>:
 8000c0e:	b508      	push	{r3, lr}
 8000c10:	2006      	movs	r0, #6
 8000c12:	f000 fd3b 	bl	800168c <raise>
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff fd72 	bl	8000700 <_exit>

08000c1c <_free_r>:
 8000c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c1e:	2900      	cmp	r1, #0
 8000c20:	d044      	beq.n	8000cac <_free_r+0x90>
 8000c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c26:	9001      	str	r0, [sp, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8000c2e:	bfb8      	it	lt
 8000c30:	18e4      	addlt	r4, r4, r3
 8000c32:	f000 f8df 	bl	8000df4 <__malloc_lock>
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <_free_r+0x94>)
 8000c38:	9801      	ldr	r0, [sp, #4]
 8000c3a:	6813      	ldr	r3, [r2, #0]
 8000c3c:	b933      	cbnz	r3, 8000c4c <_free_r+0x30>
 8000c3e:	6063      	str	r3, [r4, #4]
 8000c40:	6014      	str	r4, [r2, #0]
 8000c42:	b003      	add	sp, #12
 8000c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c48:	f000 b8da 	b.w	8000e00 <__malloc_unlock>
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	d908      	bls.n	8000c62 <_free_r+0x46>
 8000c50:	6825      	ldr	r5, [r4, #0]
 8000c52:	1961      	adds	r1, r4, r5
 8000c54:	428b      	cmp	r3, r1
 8000c56:	bf01      	itttt	eq
 8000c58:	6819      	ldreq	r1, [r3, #0]
 8000c5a:	685b      	ldreq	r3, [r3, #4]
 8000c5c:	1949      	addeq	r1, r1, r5
 8000c5e:	6021      	streq	r1, [r4, #0]
 8000c60:	e7ed      	b.n	8000c3e <_free_r+0x22>
 8000c62:	461a      	mov	r2, r3
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	b10b      	cbz	r3, 8000c6c <_free_r+0x50>
 8000c68:	42a3      	cmp	r3, r4
 8000c6a:	d9fa      	bls.n	8000c62 <_free_r+0x46>
 8000c6c:	6811      	ldr	r1, [r2, #0]
 8000c6e:	1855      	adds	r5, r2, r1
 8000c70:	42a5      	cmp	r5, r4
 8000c72:	d10b      	bne.n	8000c8c <_free_r+0x70>
 8000c74:	6824      	ldr	r4, [r4, #0]
 8000c76:	4421      	add	r1, r4
 8000c78:	1854      	adds	r4, r2, r1
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	6011      	str	r1, [r2, #0]
 8000c7e:	d1e0      	bne.n	8000c42 <_free_r+0x26>
 8000c80:	681c      	ldr	r4, [r3, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	6053      	str	r3, [r2, #4]
 8000c86:	440c      	add	r4, r1
 8000c88:	6014      	str	r4, [r2, #0]
 8000c8a:	e7da      	b.n	8000c42 <_free_r+0x26>
 8000c8c:	d902      	bls.n	8000c94 <_free_r+0x78>
 8000c8e:	230c      	movs	r3, #12
 8000c90:	6003      	str	r3, [r0, #0]
 8000c92:	e7d6      	b.n	8000c42 <_free_r+0x26>
 8000c94:	6825      	ldr	r5, [r4, #0]
 8000c96:	1961      	adds	r1, r4, r5
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	bf04      	itt	eq
 8000c9c:	6819      	ldreq	r1, [r3, #0]
 8000c9e:	685b      	ldreq	r3, [r3, #4]
 8000ca0:	6063      	str	r3, [r4, #4]
 8000ca2:	bf04      	itt	eq
 8000ca4:	1949      	addeq	r1, r1, r5
 8000ca6:	6021      	streq	r1, [r4, #0]
 8000ca8:	6054      	str	r4, [r2, #4]
 8000caa:	e7ca      	b.n	8000c42 <_free_r+0x26>
 8000cac:	b003      	add	sp, #12
 8000cae:	bd30      	pop	{r4, r5, pc}
 8000cb0:	200001c4 	.word	0x200001c4

08000cb4 <sbrk_aligned>:
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	4e0e      	ldr	r6, [pc, #56]	; (8000cf0 <sbrk_aligned+0x3c>)
 8000cb8:	460c      	mov	r4, r1
 8000cba:	6831      	ldr	r1, [r6, #0]
 8000cbc:	4605      	mov	r5, r0
 8000cbe:	b911      	cbnz	r1, 8000cc6 <sbrk_aligned+0x12>
 8000cc0:	f000 fd00 	bl	80016c4 <_sbrk_r>
 8000cc4:	6030      	str	r0, [r6, #0]
 8000cc6:	4621      	mov	r1, r4
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f000 fcfb 	bl	80016c4 <_sbrk_r>
 8000cce:	1c43      	adds	r3, r0, #1
 8000cd0:	d00a      	beq.n	8000ce8 <sbrk_aligned+0x34>
 8000cd2:	1cc4      	adds	r4, r0, #3
 8000cd4:	f024 0403 	bic.w	r4, r4, #3
 8000cd8:	42a0      	cmp	r0, r4
 8000cda:	d007      	beq.n	8000cec <sbrk_aligned+0x38>
 8000cdc:	1a21      	subs	r1, r4, r0
 8000cde:	4628      	mov	r0, r5
 8000ce0:	f000 fcf0 	bl	80016c4 <_sbrk_r>
 8000ce4:	3001      	adds	r0, #1
 8000ce6:	d101      	bne.n	8000cec <sbrk_aligned+0x38>
 8000ce8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000cec:	4620      	mov	r0, r4
 8000cee:	bd70      	pop	{r4, r5, r6, pc}
 8000cf0:	200001c8 	.word	0x200001c8

08000cf4 <_malloc_r>:
 8000cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cf8:	1ccd      	adds	r5, r1, #3
 8000cfa:	f025 0503 	bic.w	r5, r5, #3
 8000cfe:	3508      	adds	r5, #8
 8000d00:	2d0c      	cmp	r5, #12
 8000d02:	bf38      	it	cc
 8000d04:	250c      	movcc	r5, #12
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	4607      	mov	r7, r0
 8000d0a:	db01      	blt.n	8000d10 <_malloc_r+0x1c>
 8000d0c:	42a9      	cmp	r1, r5
 8000d0e:	d905      	bls.n	8000d1c <_malloc_r+0x28>
 8000d10:	230c      	movs	r3, #12
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	2600      	movs	r6, #0
 8000d16:	4630      	mov	r0, r6
 8000d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000df0 <_malloc_r+0xfc>
 8000d20:	f000 f868 	bl	8000df4 <__malloc_lock>
 8000d24:	f8d8 3000 	ldr.w	r3, [r8]
 8000d28:	461c      	mov	r4, r3
 8000d2a:	bb5c      	cbnz	r4, 8000d84 <_malloc_r+0x90>
 8000d2c:	4629      	mov	r1, r5
 8000d2e:	4638      	mov	r0, r7
 8000d30:	f7ff ffc0 	bl	8000cb4 <sbrk_aligned>
 8000d34:	1c43      	adds	r3, r0, #1
 8000d36:	4604      	mov	r4, r0
 8000d38:	d155      	bne.n	8000de6 <_malloc_r+0xf2>
 8000d3a:	f8d8 4000 	ldr.w	r4, [r8]
 8000d3e:	4626      	mov	r6, r4
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d145      	bne.n	8000dd0 <_malloc_r+0xdc>
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d048      	beq.n	8000dda <_malloc_r+0xe6>
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	4638      	mov	r0, r7
 8000d4e:	eb04 0903 	add.w	r9, r4, r3
 8000d52:	f000 fcb7 	bl	80016c4 <_sbrk_r>
 8000d56:	4581      	cmp	r9, r0
 8000d58:	d13f      	bne.n	8000dda <_malloc_r+0xe6>
 8000d5a:	6821      	ldr	r1, [r4, #0]
 8000d5c:	1a6d      	subs	r5, r5, r1
 8000d5e:	4629      	mov	r1, r5
 8000d60:	4638      	mov	r0, r7
 8000d62:	f7ff ffa7 	bl	8000cb4 <sbrk_aligned>
 8000d66:	3001      	adds	r0, #1
 8000d68:	d037      	beq.n	8000dda <_malloc_r+0xe6>
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	442b      	add	r3, r5
 8000d6e:	6023      	str	r3, [r4, #0]
 8000d70:	f8d8 3000 	ldr.w	r3, [r8]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d038      	beq.n	8000dea <_malloc_r+0xf6>
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	42a2      	cmp	r2, r4
 8000d7c:	d12b      	bne.n	8000dd6 <_malloc_r+0xe2>
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	e00f      	b.n	8000da4 <_malloc_r+0xb0>
 8000d84:	6822      	ldr	r2, [r4, #0]
 8000d86:	1b52      	subs	r2, r2, r5
 8000d88:	d41f      	bmi.n	8000dca <_malloc_r+0xd6>
 8000d8a:	2a0b      	cmp	r2, #11
 8000d8c:	d917      	bls.n	8000dbe <_malloc_r+0xca>
 8000d8e:	1961      	adds	r1, r4, r5
 8000d90:	42a3      	cmp	r3, r4
 8000d92:	6025      	str	r5, [r4, #0]
 8000d94:	bf18      	it	ne
 8000d96:	6059      	strne	r1, [r3, #4]
 8000d98:	6863      	ldr	r3, [r4, #4]
 8000d9a:	bf08      	it	eq
 8000d9c:	f8c8 1000 	streq.w	r1, [r8]
 8000da0:	5162      	str	r2, [r4, r5]
 8000da2:	604b      	str	r3, [r1, #4]
 8000da4:	4638      	mov	r0, r7
 8000da6:	f104 060b 	add.w	r6, r4, #11
 8000daa:	f000 f829 	bl	8000e00 <__malloc_unlock>
 8000dae:	f026 0607 	bic.w	r6, r6, #7
 8000db2:	1d23      	adds	r3, r4, #4
 8000db4:	1af2      	subs	r2, r6, r3
 8000db6:	d0ae      	beq.n	8000d16 <_malloc_r+0x22>
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	50a3      	str	r3, [r4, r2]
 8000dbc:	e7ab      	b.n	8000d16 <_malloc_r+0x22>
 8000dbe:	42a3      	cmp	r3, r4
 8000dc0:	6862      	ldr	r2, [r4, #4]
 8000dc2:	d1dd      	bne.n	8000d80 <_malloc_r+0x8c>
 8000dc4:	f8c8 2000 	str.w	r2, [r8]
 8000dc8:	e7ec      	b.n	8000da4 <_malloc_r+0xb0>
 8000dca:	4623      	mov	r3, r4
 8000dcc:	6864      	ldr	r4, [r4, #4]
 8000dce:	e7ac      	b.n	8000d2a <_malloc_r+0x36>
 8000dd0:	4634      	mov	r4, r6
 8000dd2:	6876      	ldr	r6, [r6, #4]
 8000dd4:	e7b4      	b.n	8000d40 <_malloc_r+0x4c>
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	e7cc      	b.n	8000d74 <_malloc_r+0x80>
 8000dda:	230c      	movs	r3, #12
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4638      	mov	r0, r7
 8000de0:	f000 f80e 	bl	8000e00 <__malloc_unlock>
 8000de4:	e797      	b.n	8000d16 <_malloc_r+0x22>
 8000de6:	6025      	str	r5, [r4, #0]
 8000de8:	e7dc      	b.n	8000da4 <_malloc_r+0xb0>
 8000dea:	605b      	str	r3, [r3, #4]
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	bf00      	nop
 8000df0:	200001c4 	.word	0x200001c4

08000df4 <__malloc_lock>:
 8000df4:	4801      	ldr	r0, [pc, #4]	; (8000dfc <__malloc_lock+0x8>)
 8000df6:	f7ff bf08 	b.w	8000c0a <__retarget_lock_acquire_recursive>
 8000dfa:	bf00      	nop
 8000dfc:	200001c0 	.word	0x200001c0

08000e00 <__malloc_unlock>:
 8000e00:	4801      	ldr	r0, [pc, #4]	; (8000e08 <__malloc_unlock+0x8>)
 8000e02:	f7ff bf03 	b.w	8000c0c <__retarget_lock_release_recursive>
 8000e06:	bf00      	nop
 8000e08:	200001c0 	.word	0x200001c0

08000e0c <__sfputc_r>:
 8000e0c:	6893      	ldr	r3, [r2, #8]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	b410      	push	{r4}
 8000e14:	6093      	str	r3, [r2, #8]
 8000e16:	da08      	bge.n	8000e2a <__sfputc_r+0x1e>
 8000e18:	6994      	ldr	r4, [r2, #24]
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	db01      	blt.n	8000e22 <__sfputc_r+0x16>
 8000e1e:	290a      	cmp	r1, #10
 8000e20:	d103      	bne.n	8000e2a <__sfputc_r+0x1e>
 8000e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e26:	f000 bb73 	b.w	8001510 <__swbuf_r>
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	1c58      	adds	r0, r3, #1
 8000e2e:	6010      	str	r0, [r2, #0]
 8000e30:	7019      	strb	r1, [r3, #0]
 8000e32:	4608      	mov	r0, r1
 8000e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <__sfputs_r>:
 8000e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	460f      	mov	r7, r1
 8000e40:	4614      	mov	r4, r2
 8000e42:	18d5      	adds	r5, r2, r3
 8000e44:	42ac      	cmp	r4, r5
 8000e46:	d101      	bne.n	8000e4c <__sfputs_r+0x12>
 8000e48:	2000      	movs	r0, #0
 8000e4a:	e007      	b.n	8000e5c <__sfputs_r+0x22>
 8000e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e50:	463a      	mov	r2, r7
 8000e52:	4630      	mov	r0, r6
 8000e54:	f7ff ffda 	bl	8000e0c <__sfputc_r>
 8000e58:	1c43      	adds	r3, r0, #1
 8000e5a:	d1f3      	bne.n	8000e44 <__sfputs_r+0xa>
 8000e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e60 <_vfiprintf_r>:
 8000e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e64:	460d      	mov	r5, r1
 8000e66:	b09d      	sub	sp, #116	; 0x74
 8000e68:	4614      	mov	r4, r2
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	b118      	cbz	r0, 8000e78 <_vfiprintf_r+0x18>
 8000e70:	6a03      	ldr	r3, [r0, #32]
 8000e72:	b90b      	cbnz	r3, 8000e78 <_vfiprintf_r+0x18>
 8000e74:	f7ff fdc4 	bl	8000a00 <__sinit>
 8000e78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e7a:	07d9      	lsls	r1, r3, #31
 8000e7c:	d405      	bmi.n	8000e8a <_vfiprintf_r+0x2a>
 8000e7e:	89ab      	ldrh	r3, [r5, #12]
 8000e80:	059a      	lsls	r2, r3, #22
 8000e82:	d402      	bmi.n	8000e8a <_vfiprintf_r+0x2a>
 8000e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e86:	f7ff fec0 	bl	8000c0a <__retarget_lock_acquire_recursive>
 8000e8a:	89ab      	ldrh	r3, [r5, #12]
 8000e8c:	071b      	lsls	r3, r3, #28
 8000e8e:	d501      	bpl.n	8000e94 <_vfiprintf_r+0x34>
 8000e90:	692b      	ldr	r3, [r5, #16]
 8000e92:	b99b      	cbnz	r3, 8000ebc <_vfiprintf_r+0x5c>
 8000e94:	4629      	mov	r1, r5
 8000e96:	4630      	mov	r0, r6
 8000e98:	f000 fb78 	bl	800158c <__swsetup_r>
 8000e9c:	b170      	cbz	r0, 8000ebc <_vfiprintf_r+0x5c>
 8000e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ea0:	07dc      	lsls	r4, r3, #31
 8000ea2:	d504      	bpl.n	8000eae <_vfiprintf_r+0x4e>
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea8:	b01d      	add	sp, #116	; 0x74
 8000eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eae:	89ab      	ldrh	r3, [r5, #12]
 8000eb0:	0598      	lsls	r0, r3, #22
 8000eb2:	d4f7      	bmi.n	8000ea4 <_vfiprintf_r+0x44>
 8000eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000eb6:	f7ff fea9 	bl	8000c0c <__retarget_lock_release_recursive>
 8000eba:	e7f3      	b.n	8000ea4 <_vfiprintf_r+0x44>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000eca:	2330      	movs	r3, #48	; 0x30
 8000ecc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001080 <_vfiprintf_r+0x220>
 8000ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ed4:	f04f 0901 	mov.w	r9, #1
 8000ed8:	4623      	mov	r3, r4
 8000eda:	469a      	mov	sl, r3
 8000edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ee0:	b10a      	cbz	r2, 8000ee6 <_vfiprintf_r+0x86>
 8000ee2:	2a25      	cmp	r2, #37	; 0x25
 8000ee4:	d1f9      	bne.n	8000eda <_vfiprintf_r+0x7a>
 8000ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8000eea:	d00b      	beq.n	8000f04 <_vfiprintf_r+0xa4>
 8000eec:	465b      	mov	r3, fp
 8000eee:	4622      	mov	r2, r4
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	f7ff ffa1 	bl	8000e3a <__sfputs_r>
 8000ef8:	3001      	adds	r0, #1
 8000efa:	f000 80a9 	beq.w	8001050 <_vfiprintf_r+0x1f0>
 8000efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f00:	445a      	add	r2, fp
 8000f02:	9209      	str	r2, [sp, #36]	; 0x24
 8000f04:	f89a 3000 	ldrb.w	r3, [sl]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80a1 	beq.w	8001050 <_vfiprintf_r+0x1f0>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f18:	f10a 0a01 	add.w	sl, sl, #1
 8000f1c:	9304      	str	r3, [sp, #16]
 8000f1e:	9307      	str	r3, [sp, #28]
 8000f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000f24:	931a      	str	r3, [sp, #104]	; 0x68
 8000f26:	4654      	mov	r4, sl
 8000f28:	2205      	movs	r2, #5
 8000f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f2e:	4854      	ldr	r0, [pc, #336]	; (8001080 <_vfiprintf_r+0x220>)
 8000f30:	f7ff f94e 	bl	80001d0 <memchr>
 8000f34:	9a04      	ldr	r2, [sp, #16]
 8000f36:	b9d8      	cbnz	r0, 8000f70 <_vfiprintf_r+0x110>
 8000f38:	06d1      	lsls	r1, r2, #27
 8000f3a:	bf44      	itt	mi
 8000f3c:	2320      	movmi	r3, #32
 8000f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f42:	0713      	lsls	r3, r2, #28
 8000f44:	bf44      	itt	mi
 8000f46:	232b      	movmi	r3, #43	; 0x2b
 8000f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8000f50:	2b2a      	cmp	r3, #42	; 0x2a
 8000f52:	d015      	beq.n	8000f80 <_vfiprintf_r+0x120>
 8000f54:	9a07      	ldr	r2, [sp, #28]
 8000f56:	4654      	mov	r4, sl
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f04f 0c0a 	mov.w	ip, #10
 8000f5e:	4621      	mov	r1, r4
 8000f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f64:	3b30      	subs	r3, #48	; 0x30
 8000f66:	2b09      	cmp	r3, #9
 8000f68:	d94d      	bls.n	8001006 <_vfiprintf_r+0x1a6>
 8000f6a:	b1b0      	cbz	r0, 8000f9a <_vfiprintf_r+0x13a>
 8000f6c:	9207      	str	r2, [sp, #28]
 8000f6e:	e014      	b.n	8000f9a <_vfiprintf_r+0x13a>
 8000f70:	eba0 0308 	sub.w	r3, r0, r8
 8000f74:	fa09 f303 	lsl.w	r3, r9, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	9304      	str	r3, [sp, #16]
 8000f7c:	46a2      	mov	sl, r4
 8000f7e:	e7d2      	b.n	8000f26 <_vfiprintf_r+0xc6>
 8000f80:	9b03      	ldr	r3, [sp, #12]
 8000f82:	1d19      	adds	r1, r3, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	9103      	str	r1, [sp, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	bfbb      	ittet	lt
 8000f8c:	425b      	neglt	r3, r3
 8000f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8000f92:	9307      	strge	r3, [sp, #28]
 8000f94:	9307      	strlt	r3, [sp, #28]
 8000f96:	bfb8      	it	lt
 8000f98:	9204      	strlt	r2, [sp, #16]
 8000f9a:	7823      	ldrb	r3, [r4, #0]
 8000f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f9e:	d10c      	bne.n	8000fba <_vfiprintf_r+0x15a>
 8000fa0:	7863      	ldrb	r3, [r4, #1]
 8000fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8000fa4:	d134      	bne.n	8001010 <_vfiprintf_r+0x1b0>
 8000fa6:	9b03      	ldr	r3, [sp, #12]
 8000fa8:	1d1a      	adds	r2, r3, #4
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	9203      	str	r2, [sp, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bfb8      	it	lt
 8000fb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000fb6:	3402      	adds	r4, #2
 8000fb8:	9305      	str	r3, [sp, #20]
 8000fba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001090 <_vfiprintf_r+0x230>
 8000fbe:	7821      	ldrb	r1, [r4, #0]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	4650      	mov	r0, sl
 8000fc4:	f7ff f904 	bl	80001d0 <memchr>
 8000fc8:	b138      	cbz	r0, 8000fda <_vfiprintf_r+0x17a>
 8000fca:	9b04      	ldr	r3, [sp, #16]
 8000fcc:	eba0 000a 	sub.w	r0, r0, sl
 8000fd0:	2240      	movs	r2, #64	; 0x40
 8000fd2:	4082      	lsls	r2, r0
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	3401      	adds	r4, #1
 8000fd8:	9304      	str	r3, [sp, #16]
 8000fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fde:	4829      	ldr	r0, [pc, #164]	; (8001084 <_vfiprintf_r+0x224>)
 8000fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000fe4:	2206      	movs	r2, #6
 8000fe6:	f7ff f8f3 	bl	80001d0 <memchr>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d03f      	beq.n	800106e <_vfiprintf_r+0x20e>
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <_vfiprintf_r+0x228>)
 8000ff0:	bb1b      	cbnz	r3, 800103a <_vfiprintf_r+0x1da>
 8000ff2:	9b03      	ldr	r3, [sp, #12]
 8000ff4:	3307      	adds	r3, #7
 8000ff6:	f023 0307 	bic.w	r3, r3, #7
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	9303      	str	r3, [sp, #12]
 8000ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001000:	443b      	add	r3, r7
 8001002:	9309      	str	r3, [sp, #36]	; 0x24
 8001004:	e768      	b.n	8000ed8 <_vfiprintf_r+0x78>
 8001006:	fb0c 3202 	mla	r2, ip, r2, r3
 800100a:	460c      	mov	r4, r1
 800100c:	2001      	movs	r0, #1
 800100e:	e7a6      	b.n	8000f5e <_vfiprintf_r+0xfe>
 8001010:	2300      	movs	r3, #0
 8001012:	3401      	adds	r4, #1
 8001014:	9305      	str	r3, [sp, #20]
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 0c0a 	mov.w	ip, #10
 800101c:	4620      	mov	r0, r4
 800101e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001022:	3a30      	subs	r2, #48	; 0x30
 8001024:	2a09      	cmp	r2, #9
 8001026:	d903      	bls.n	8001030 <_vfiprintf_r+0x1d0>
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0c6      	beq.n	8000fba <_vfiprintf_r+0x15a>
 800102c:	9105      	str	r1, [sp, #20]
 800102e:	e7c4      	b.n	8000fba <_vfiprintf_r+0x15a>
 8001030:	fb0c 2101 	mla	r1, ip, r1, r2
 8001034:	4604      	mov	r4, r0
 8001036:	2301      	movs	r3, #1
 8001038:	e7f0      	b.n	800101c <_vfiprintf_r+0x1bc>
 800103a:	ab03      	add	r3, sp, #12
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	462a      	mov	r2, r5
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <_vfiprintf_r+0x22c>)
 8001042:	a904      	add	r1, sp, #16
 8001044:	4630      	mov	r0, r6
 8001046:	f3af 8000 	nop.w
 800104a:	4607      	mov	r7, r0
 800104c:	1c78      	adds	r0, r7, #1
 800104e:	d1d6      	bne.n	8000ffe <_vfiprintf_r+0x19e>
 8001050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001052:	07d9      	lsls	r1, r3, #31
 8001054:	d405      	bmi.n	8001062 <_vfiprintf_r+0x202>
 8001056:	89ab      	ldrh	r3, [r5, #12]
 8001058:	059a      	lsls	r2, r3, #22
 800105a:	d402      	bmi.n	8001062 <_vfiprintf_r+0x202>
 800105c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800105e:	f7ff fdd5 	bl	8000c0c <__retarget_lock_release_recursive>
 8001062:	89ab      	ldrh	r3, [r5, #12]
 8001064:	065b      	lsls	r3, r3, #25
 8001066:	f53f af1d 	bmi.w	8000ea4 <_vfiprintf_r+0x44>
 800106a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800106c:	e71c      	b.n	8000ea8 <_vfiprintf_r+0x48>
 800106e:	ab03      	add	r3, sp, #12
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	462a      	mov	r2, r5
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <_vfiprintf_r+0x22c>)
 8001076:	a904      	add	r1, sp, #16
 8001078:	4630      	mov	r0, r6
 800107a:	f000 f879 	bl	8001170 <_printf_i>
 800107e:	e7e4      	b.n	800104a <_vfiprintf_r+0x1ea>
 8001080:	080018d9 	.word	0x080018d9
 8001084:	080018e3 	.word	0x080018e3
 8001088:	00000000 	.word	0x00000000
 800108c:	08000e3b 	.word	0x08000e3b
 8001090:	080018df 	.word	0x080018df

08001094 <_printf_common>:
 8001094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001098:	4616      	mov	r6, r2
 800109a:	4699      	mov	r9, r3
 800109c:	688a      	ldr	r2, [r1, #8]
 800109e:	690b      	ldr	r3, [r1, #16]
 80010a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	bfb8      	it	lt
 80010a8:	4613      	movlt	r3, r2
 80010aa:	6033      	str	r3, [r6, #0]
 80010ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80010b0:	4607      	mov	r7, r0
 80010b2:	460c      	mov	r4, r1
 80010b4:	b10a      	cbz	r2, 80010ba <_printf_common+0x26>
 80010b6:	3301      	adds	r3, #1
 80010b8:	6033      	str	r3, [r6, #0]
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	0699      	lsls	r1, r3, #26
 80010be:	bf42      	ittt	mi
 80010c0:	6833      	ldrmi	r3, [r6, #0]
 80010c2:	3302      	addmi	r3, #2
 80010c4:	6033      	strmi	r3, [r6, #0]
 80010c6:	6825      	ldr	r5, [r4, #0]
 80010c8:	f015 0506 	ands.w	r5, r5, #6
 80010cc:	d106      	bne.n	80010dc <_printf_common+0x48>
 80010ce:	f104 0a19 	add.w	sl, r4, #25
 80010d2:	68e3      	ldr	r3, [r4, #12]
 80010d4:	6832      	ldr	r2, [r6, #0]
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	42ab      	cmp	r3, r5
 80010da:	dc26      	bgt.n	800112a <_printf_common+0x96>
 80010dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80010e0:	1e13      	subs	r3, r2, #0
 80010e2:	6822      	ldr	r2, [r4, #0]
 80010e4:	bf18      	it	ne
 80010e6:	2301      	movne	r3, #1
 80010e8:	0692      	lsls	r2, r2, #26
 80010ea:	d42b      	bmi.n	8001144 <_printf_common+0xb0>
 80010ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010f0:	4649      	mov	r1, r9
 80010f2:	4638      	mov	r0, r7
 80010f4:	47c0      	blx	r8
 80010f6:	3001      	adds	r0, #1
 80010f8:	d01e      	beq.n	8001138 <_printf_common+0xa4>
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	6922      	ldr	r2, [r4, #16]
 80010fe:	f003 0306 	and.w	r3, r3, #6
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf02      	ittt	eq
 8001106:	68e5      	ldreq	r5, [r4, #12]
 8001108:	6833      	ldreq	r3, [r6, #0]
 800110a:	1aed      	subeq	r5, r5, r3
 800110c:	68a3      	ldr	r3, [r4, #8]
 800110e:	bf0c      	ite	eq
 8001110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001114:	2500      	movne	r5, #0
 8001116:	4293      	cmp	r3, r2
 8001118:	bfc4      	itt	gt
 800111a:	1a9b      	subgt	r3, r3, r2
 800111c:	18ed      	addgt	r5, r5, r3
 800111e:	2600      	movs	r6, #0
 8001120:	341a      	adds	r4, #26
 8001122:	42b5      	cmp	r5, r6
 8001124:	d11a      	bne.n	800115c <_printf_common+0xc8>
 8001126:	2000      	movs	r0, #0
 8001128:	e008      	b.n	800113c <_printf_common+0xa8>
 800112a:	2301      	movs	r3, #1
 800112c:	4652      	mov	r2, sl
 800112e:	4649      	mov	r1, r9
 8001130:	4638      	mov	r0, r7
 8001132:	47c0      	blx	r8
 8001134:	3001      	adds	r0, #1
 8001136:	d103      	bne.n	8001140 <_printf_common+0xac>
 8001138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800113c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001140:	3501      	adds	r5, #1
 8001142:	e7c6      	b.n	80010d2 <_printf_common+0x3e>
 8001144:	18e1      	adds	r1, r4, r3
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	2030      	movs	r0, #48	; 0x30
 800114a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800114e:	4422      	add	r2, r4
 8001150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001158:	3302      	adds	r3, #2
 800115a:	e7c7      	b.n	80010ec <_printf_common+0x58>
 800115c:	2301      	movs	r3, #1
 800115e:	4622      	mov	r2, r4
 8001160:	4649      	mov	r1, r9
 8001162:	4638      	mov	r0, r7
 8001164:	47c0      	blx	r8
 8001166:	3001      	adds	r0, #1
 8001168:	d0e6      	beq.n	8001138 <_printf_common+0xa4>
 800116a:	3601      	adds	r6, #1
 800116c:	e7d9      	b.n	8001122 <_printf_common+0x8e>
	...

08001170 <_printf_i>:
 8001170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	7e0f      	ldrb	r7, [r1, #24]
 8001176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001178:	2f78      	cmp	r7, #120	; 0x78
 800117a:	4691      	mov	r9, r2
 800117c:	4680      	mov	r8, r0
 800117e:	460c      	mov	r4, r1
 8001180:	469a      	mov	sl, r3
 8001182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001186:	d807      	bhi.n	8001198 <_printf_i+0x28>
 8001188:	2f62      	cmp	r7, #98	; 0x62
 800118a:	d80a      	bhi.n	80011a2 <_printf_i+0x32>
 800118c:	2f00      	cmp	r7, #0
 800118e:	f000 80d4 	beq.w	800133a <_printf_i+0x1ca>
 8001192:	2f58      	cmp	r7, #88	; 0x58
 8001194:	f000 80c0 	beq.w	8001318 <_printf_i+0x1a8>
 8001198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800119c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80011a0:	e03a      	b.n	8001218 <_printf_i+0xa8>
 80011a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80011a6:	2b15      	cmp	r3, #21
 80011a8:	d8f6      	bhi.n	8001198 <_printf_i+0x28>
 80011aa:	a101      	add	r1, pc, #4	; (adr r1, 80011b0 <_printf_i+0x40>)
 80011ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011b0:	08001209 	.word	0x08001209
 80011b4:	0800121d 	.word	0x0800121d
 80011b8:	08001199 	.word	0x08001199
 80011bc:	08001199 	.word	0x08001199
 80011c0:	08001199 	.word	0x08001199
 80011c4:	08001199 	.word	0x08001199
 80011c8:	0800121d 	.word	0x0800121d
 80011cc:	08001199 	.word	0x08001199
 80011d0:	08001199 	.word	0x08001199
 80011d4:	08001199 	.word	0x08001199
 80011d8:	08001199 	.word	0x08001199
 80011dc:	08001321 	.word	0x08001321
 80011e0:	08001249 	.word	0x08001249
 80011e4:	080012db 	.word	0x080012db
 80011e8:	08001199 	.word	0x08001199
 80011ec:	08001199 	.word	0x08001199
 80011f0:	08001343 	.word	0x08001343
 80011f4:	08001199 	.word	0x08001199
 80011f8:	08001249 	.word	0x08001249
 80011fc:	08001199 	.word	0x08001199
 8001200:	08001199 	.word	0x08001199
 8001204:	080012e3 	.word	0x080012e3
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	1d1a      	adds	r2, r3, #4
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	602a      	str	r2, [r5, #0]
 8001210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001218:	2301      	movs	r3, #1
 800121a:	e09f      	b.n	800135c <_printf_i+0x1ec>
 800121c:	6820      	ldr	r0, [r4, #0]
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	0607      	lsls	r7, r0, #24
 8001222:	f103 0104 	add.w	r1, r3, #4
 8001226:	6029      	str	r1, [r5, #0]
 8001228:	d501      	bpl.n	800122e <_printf_i+0xbe>
 800122a:	681e      	ldr	r6, [r3, #0]
 800122c:	e003      	b.n	8001236 <_printf_i+0xc6>
 800122e:	0646      	lsls	r6, r0, #25
 8001230:	d5fb      	bpl.n	800122a <_printf_i+0xba>
 8001232:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001236:	2e00      	cmp	r6, #0
 8001238:	da03      	bge.n	8001242 <_printf_i+0xd2>
 800123a:	232d      	movs	r3, #45	; 0x2d
 800123c:	4276      	negs	r6, r6
 800123e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001242:	485a      	ldr	r0, [pc, #360]	; (80013ac <_printf_i+0x23c>)
 8001244:	230a      	movs	r3, #10
 8001246:	e012      	b.n	800126e <_printf_i+0xfe>
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	6820      	ldr	r0, [r4, #0]
 800124c:	1d19      	adds	r1, r3, #4
 800124e:	6029      	str	r1, [r5, #0]
 8001250:	0605      	lsls	r5, r0, #24
 8001252:	d501      	bpl.n	8001258 <_printf_i+0xe8>
 8001254:	681e      	ldr	r6, [r3, #0]
 8001256:	e002      	b.n	800125e <_printf_i+0xee>
 8001258:	0641      	lsls	r1, r0, #25
 800125a:	d5fb      	bpl.n	8001254 <_printf_i+0xe4>
 800125c:	881e      	ldrh	r6, [r3, #0]
 800125e:	4853      	ldr	r0, [pc, #332]	; (80013ac <_printf_i+0x23c>)
 8001260:	2f6f      	cmp	r7, #111	; 0x6f
 8001262:	bf0c      	ite	eq
 8001264:	2308      	moveq	r3, #8
 8001266:	230a      	movne	r3, #10
 8001268:	2100      	movs	r1, #0
 800126a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800126e:	6865      	ldr	r5, [r4, #4]
 8001270:	60a5      	str	r5, [r4, #8]
 8001272:	2d00      	cmp	r5, #0
 8001274:	bfa2      	ittt	ge
 8001276:	6821      	ldrge	r1, [r4, #0]
 8001278:	f021 0104 	bicge.w	r1, r1, #4
 800127c:	6021      	strge	r1, [r4, #0]
 800127e:	b90e      	cbnz	r6, 8001284 <_printf_i+0x114>
 8001280:	2d00      	cmp	r5, #0
 8001282:	d04b      	beq.n	800131c <_printf_i+0x1ac>
 8001284:	4615      	mov	r5, r2
 8001286:	fbb6 f1f3 	udiv	r1, r6, r3
 800128a:	fb03 6711 	mls	r7, r3, r1, r6
 800128e:	5dc7      	ldrb	r7, [r0, r7]
 8001290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001294:	4637      	mov	r7, r6
 8001296:	42bb      	cmp	r3, r7
 8001298:	460e      	mov	r6, r1
 800129a:	d9f4      	bls.n	8001286 <_printf_i+0x116>
 800129c:	2b08      	cmp	r3, #8
 800129e:	d10b      	bne.n	80012b8 <_printf_i+0x148>
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	07de      	lsls	r6, r3, #31
 80012a4:	d508      	bpl.n	80012b8 <_printf_i+0x148>
 80012a6:	6923      	ldr	r3, [r4, #16]
 80012a8:	6861      	ldr	r1, [r4, #4]
 80012aa:	4299      	cmp	r1, r3
 80012ac:	bfde      	ittt	le
 80012ae:	2330      	movle	r3, #48	; 0x30
 80012b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80012b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80012b8:	1b52      	subs	r2, r2, r5
 80012ba:	6122      	str	r2, [r4, #16]
 80012bc:	f8cd a000 	str.w	sl, [sp]
 80012c0:	464b      	mov	r3, r9
 80012c2:	aa03      	add	r2, sp, #12
 80012c4:	4621      	mov	r1, r4
 80012c6:	4640      	mov	r0, r8
 80012c8:	f7ff fee4 	bl	8001094 <_printf_common>
 80012cc:	3001      	adds	r0, #1
 80012ce:	d14a      	bne.n	8001366 <_printf_i+0x1f6>
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d4:	b004      	add	sp, #16
 80012d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	f043 0320 	orr.w	r3, r3, #32
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	4833      	ldr	r0, [pc, #204]	; (80013b0 <_printf_i+0x240>)
 80012e4:	2778      	movs	r7, #120	; 0x78
 80012e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	6829      	ldr	r1, [r5, #0]
 80012ee:	061f      	lsls	r7, r3, #24
 80012f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80012f4:	d402      	bmi.n	80012fc <_printf_i+0x18c>
 80012f6:	065f      	lsls	r7, r3, #25
 80012f8:	bf48      	it	mi
 80012fa:	b2b6      	uxthmi	r6, r6
 80012fc:	07df      	lsls	r7, r3, #31
 80012fe:	bf48      	it	mi
 8001300:	f043 0320 	orrmi.w	r3, r3, #32
 8001304:	6029      	str	r1, [r5, #0]
 8001306:	bf48      	it	mi
 8001308:	6023      	strmi	r3, [r4, #0]
 800130a:	b91e      	cbnz	r6, 8001314 <_printf_i+0x1a4>
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	f023 0320 	bic.w	r3, r3, #32
 8001312:	6023      	str	r3, [r4, #0]
 8001314:	2310      	movs	r3, #16
 8001316:	e7a7      	b.n	8001268 <_printf_i+0xf8>
 8001318:	4824      	ldr	r0, [pc, #144]	; (80013ac <_printf_i+0x23c>)
 800131a:	e7e4      	b.n	80012e6 <_printf_i+0x176>
 800131c:	4615      	mov	r5, r2
 800131e:	e7bd      	b.n	800129c <_printf_i+0x12c>
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	6826      	ldr	r6, [r4, #0]
 8001324:	6961      	ldr	r1, [r4, #20]
 8001326:	1d18      	adds	r0, r3, #4
 8001328:	6028      	str	r0, [r5, #0]
 800132a:	0635      	lsls	r5, r6, #24
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	d501      	bpl.n	8001334 <_printf_i+0x1c4>
 8001330:	6019      	str	r1, [r3, #0]
 8001332:	e002      	b.n	800133a <_printf_i+0x1ca>
 8001334:	0670      	lsls	r0, r6, #25
 8001336:	d5fb      	bpl.n	8001330 <_printf_i+0x1c0>
 8001338:	8019      	strh	r1, [r3, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	6123      	str	r3, [r4, #16]
 800133e:	4615      	mov	r5, r2
 8001340:	e7bc      	b.n	80012bc <_printf_i+0x14c>
 8001342:	682b      	ldr	r3, [r5, #0]
 8001344:	1d1a      	adds	r2, r3, #4
 8001346:	602a      	str	r2, [r5, #0]
 8001348:	681d      	ldr	r5, [r3, #0]
 800134a:	6862      	ldr	r2, [r4, #4]
 800134c:	2100      	movs	r1, #0
 800134e:	4628      	mov	r0, r5
 8001350:	f7fe ff3e 	bl	80001d0 <memchr>
 8001354:	b108      	cbz	r0, 800135a <_printf_i+0x1ea>
 8001356:	1b40      	subs	r0, r0, r5
 8001358:	6060      	str	r0, [r4, #4]
 800135a:	6863      	ldr	r3, [r4, #4]
 800135c:	6123      	str	r3, [r4, #16]
 800135e:	2300      	movs	r3, #0
 8001360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001364:	e7aa      	b.n	80012bc <_printf_i+0x14c>
 8001366:	6923      	ldr	r3, [r4, #16]
 8001368:	462a      	mov	r2, r5
 800136a:	4649      	mov	r1, r9
 800136c:	4640      	mov	r0, r8
 800136e:	47d0      	blx	sl
 8001370:	3001      	adds	r0, #1
 8001372:	d0ad      	beq.n	80012d0 <_printf_i+0x160>
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	079b      	lsls	r3, r3, #30
 8001378:	d413      	bmi.n	80013a2 <_printf_i+0x232>
 800137a:	68e0      	ldr	r0, [r4, #12]
 800137c:	9b03      	ldr	r3, [sp, #12]
 800137e:	4298      	cmp	r0, r3
 8001380:	bfb8      	it	lt
 8001382:	4618      	movlt	r0, r3
 8001384:	e7a6      	b.n	80012d4 <_printf_i+0x164>
 8001386:	2301      	movs	r3, #1
 8001388:	4632      	mov	r2, r6
 800138a:	4649      	mov	r1, r9
 800138c:	4640      	mov	r0, r8
 800138e:	47d0      	blx	sl
 8001390:	3001      	adds	r0, #1
 8001392:	d09d      	beq.n	80012d0 <_printf_i+0x160>
 8001394:	3501      	adds	r5, #1
 8001396:	68e3      	ldr	r3, [r4, #12]
 8001398:	9903      	ldr	r1, [sp, #12]
 800139a:	1a5b      	subs	r3, r3, r1
 800139c:	42ab      	cmp	r3, r5
 800139e:	dcf2      	bgt.n	8001386 <_printf_i+0x216>
 80013a0:	e7eb      	b.n	800137a <_printf_i+0x20a>
 80013a2:	2500      	movs	r5, #0
 80013a4:	f104 0619 	add.w	r6, r4, #25
 80013a8:	e7f5      	b.n	8001396 <_printf_i+0x226>
 80013aa:	bf00      	nop
 80013ac:	080018ea 	.word	0x080018ea
 80013b0:	080018fb 	.word	0x080018fb

080013b4 <__sflush_r>:
 80013b4:	898a      	ldrh	r2, [r1, #12]
 80013b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ba:	4605      	mov	r5, r0
 80013bc:	0710      	lsls	r0, r2, #28
 80013be:	460c      	mov	r4, r1
 80013c0:	d458      	bmi.n	8001474 <__sflush_r+0xc0>
 80013c2:	684b      	ldr	r3, [r1, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	dc05      	bgt.n	80013d4 <__sflush_r+0x20>
 80013c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dc02      	bgt.n	80013d4 <__sflush_r+0x20>
 80013ce:	2000      	movs	r0, #0
 80013d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013d6:	2e00      	cmp	r6, #0
 80013d8:	d0f9      	beq.n	80013ce <__sflush_r+0x1a>
 80013da:	2300      	movs	r3, #0
 80013dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013e0:	682f      	ldr	r7, [r5, #0]
 80013e2:	6a21      	ldr	r1, [r4, #32]
 80013e4:	602b      	str	r3, [r5, #0]
 80013e6:	d032      	beq.n	800144e <__sflush_r+0x9a>
 80013e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013ea:	89a3      	ldrh	r3, [r4, #12]
 80013ec:	075a      	lsls	r2, r3, #29
 80013ee:	d505      	bpl.n	80013fc <__sflush_r+0x48>
 80013f0:	6863      	ldr	r3, [r4, #4]
 80013f2:	1ac0      	subs	r0, r0, r3
 80013f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013f6:	b10b      	cbz	r3, 80013fc <__sflush_r+0x48>
 80013f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013fa:	1ac0      	subs	r0, r0, r3
 80013fc:	2300      	movs	r3, #0
 80013fe:	4602      	mov	r2, r0
 8001400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001402:	6a21      	ldr	r1, [r4, #32]
 8001404:	4628      	mov	r0, r5
 8001406:	47b0      	blx	r6
 8001408:	1c43      	adds	r3, r0, #1
 800140a:	89a3      	ldrh	r3, [r4, #12]
 800140c:	d106      	bne.n	800141c <__sflush_r+0x68>
 800140e:	6829      	ldr	r1, [r5, #0]
 8001410:	291d      	cmp	r1, #29
 8001412:	d82b      	bhi.n	800146c <__sflush_r+0xb8>
 8001414:	4a29      	ldr	r2, [pc, #164]	; (80014bc <__sflush_r+0x108>)
 8001416:	410a      	asrs	r2, r1
 8001418:	07d6      	lsls	r6, r2, #31
 800141a:	d427      	bmi.n	800146c <__sflush_r+0xb8>
 800141c:	2200      	movs	r2, #0
 800141e:	6062      	str	r2, [r4, #4]
 8001420:	04d9      	lsls	r1, r3, #19
 8001422:	6922      	ldr	r2, [r4, #16]
 8001424:	6022      	str	r2, [r4, #0]
 8001426:	d504      	bpl.n	8001432 <__sflush_r+0x7e>
 8001428:	1c42      	adds	r2, r0, #1
 800142a:	d101      	bne.n	8001430 <__sflush_r+0x7c>
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	b903      	cbnz	r3, 8001432 <__sflush_r+0x7e>
 8001430:	6560      	str	r0, [r4, #84]	; 0x54
 8001432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001434:	602f      	str	r7, [r5, #0]
 8001436:	2900      	cmp	r1, #0
 8001438:	d0c9      	beq.n	80013ce <__sflush_r+0x1a>
 800143a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800143e:	4299      	cmp	r1, r3
 8001440:	d002      	beq.n	8001448 <__sflush_r+0x94>
 8001442:	4628      	mov	r0, r5
 8001444:	f7ff fbea 	bl	8000c1c <_free_r>
 8001448:	2000      	movs	r0, #0
 800144a:	6360      	str	r0, [r4, #52]	; 0x34
 800144c:	e7c0      	b.n	80013d0 <__sflush_r+0x1c>
 800144e:	2301      	movs	r3, #1
 8001450:	4628      	mov	r0, r5
 8001452:	47b0      	blx	r6
 8001454:	1c41      	adds	r1, r0, #1
 8001456:	d1c8      	bne.n	80013ea <__sflush_r+0x36>
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0c5      	beq.n	80013ea <__sflush_r+0x36>
 800145e:	2b1d      	cmp	r3, #29
 8001460:	d001      	beq.n	8001466 <__sflush_r+0xb2>
 8001462:	2b16      	cmp	r3, #22
 8001464:	d101      	bne.n	800146a <__sflush_r+0xb6>
 8001466:	602f      	str	r7, [r5, #0]
 8001468:	e7b1      	b.n	80013ce <__sflush_r+0x1a>
 800146a:	89a3      	ldrh	r3, [r4, #12]
 800146c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001470:	81a3      	strh	r3, [r4, #12]
 8001472:	e7ad      	b.n	80013d0 <__sflush_r+0x1c>
 8001474:	690f      	ldr	r7, [r1, #16]
 8001476:	2f00      	cmp	r7, #0
 8001478:	d0a9      	beq.n	80013ce <__sflush_r+0x1a>
 800147a:	0793      	lsls	r3, r2, #30
 800147c:	680e      	ldr	r6, [r1, #0]
 800147e:	bf08      	it	eq
 8001480:	694b      	ldreq	r3, [r1, #20]
 8001482:	600f      	str	r7, [r1, #0]
 8001484:	bf18      	it	ne
 8001486:	2300      	movne	r3, #0
 8001488:	eba6 0807 	sub.w	r8, r6, r7
 800148c:	608b      	str	r3, [r1, #8]
 800148e:	f1b8 0f00 	cmp.w	r8, #0
 8001492:	dd9c      	ble.n	80013ce <__sflush_r+0x1a>
 8001494:	6a21      	ldr	r1, [r4, #32]
 8001496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001498:	4643      	mov	r3, r8
 800149a:	463a      	mov	r2, r7
 800149c:	4628      	mov	r0, r5
 800149e:	47b0      	blx	r6
 80014a0:	2800      	cmp	r0, #0
 80014a2:	dc06      	bgt.n	80014b2 <__sflush_r+0xfe>
 80014a4:	89a3      	ldrh	r3, [r4, #12]
 80014a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014aa:	81a3      	strh	r3, [r4, #12]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b0:	e78e      	b.n	80013d0 <__sflush_r+0x1c>
 80014b2:	4407      	add	r7, r0
 80014b4:	eba8 0800 	sub.w	r8, r8, r0
 80014b8:	e7e9      	b.n	800148e <__sflush_r+0xda>
 80014ba:	bf00      	nop
 80014bc:	dfbffffe 	.word	0xdfbffffe

080014c0 <_fflush_r>:
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	690b      	ldr	r3, [r1, #16]
 80014c4:	4605      	mov	r5, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	b913      	cbnz	r3, 80014d0 <_fflush_r+0x10>
 80014ca:	2500      	movs	r5, #0
 80014cc:	4628      	mov	r0, r5
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
 80014d0:	b118      	cbz	r0, 80014da <_fflush_r+0x1a>
 80014d2:	6a03      	ldr	r3, [r0, #32]
 80014d4:	b90b      	cbnz	r3, 80014da <_fflush_r+0x1a>
 80014d6:	f7ff fa93 	bl	8000a00 <__sinit>
 80014da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f3      	beq.n	80014ca <_fflush_r+0xa>
 80014e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014e4:	07d0      	lsls	r0, r2, #31
 80014e6:	d404      	bmi.n	80014f2 <_fflush_r+0x32>
 80014e8:	0599      	lsls	r1, r3, #22
 80014ea:	d402      	bmi.n	80014f2 <_fflush_r+0x32>
 80014ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ee:	f7ff fb8c 	bl	8000c0a <__retarget_lock_acquire_recursive>
 80014f2:	4628      	mov	r0, r5
 80014f4:	4621      	mov	r1, r4
 80014f6:	f7ff ff5d 	bl	80013b4 <__sflush_r>
 80014fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014fc:	07da      	lsls	r2, r3, #31
 80014fe:	4605      	mov	r5, r0
 8001500:	d4e4      	bmi.n	80014cc <_fflush_r+0xc>
 8001502:	89a3      	ldrh	r3, [r4, #12]
 8001504:	059b      	lsls	r3, r3, #22
 8001506:	d4e1      	bmi.n	80014cc <_fflush_r+0xc>
 8001508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800150a:	f7ff fb7f 	bl	8000c0c <__retarget_lock_release_recursive>
 800150e:	e7dd      	b.n	80014cc <_fflush_r+0xc>

08001510 <__swbuf_r>:
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001512:	460e      	mov	r6, r1
 8001514:	4614      	mov	r4, r2
 8001516:	4605      	mov	r5, r0
 8001518:	b118      	cbz	r0, 8001522 <__swbuf_r+0x12>
 800151a:	6a03      	ldr	r3, [r0, #32]
 800151c:	b90b      	cbnz	r3, 8001522 <__swbuf_r+0x12>
 800151e:	f7ff fa6f 	bl	8000a00 <__sinit>
 8001522:	69a3      	ldr	r3, [r4, #24]
 8001524:	60a3      	str	r3, [r4, #8]
 8001526:	89a3      	ldrh	r3, [r4, #12]
 8001528:	071a      	lsls	r2, r3, #28
 800152a:	d525      	bpl.n	8001578 <__swbuf_r+0x68>
 800152c:	6923      	ldr	r3, [r4, #16]
 800152e:	b31b      	cbz	r3, 8001578 <__swbuf_r+0x68>
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	6922      	ldr	r2, [r4, #16]
 8001534:	1a98      	subs	r0, r3, r2
 8001536:	6963      	ldr	r3, [r4, #20]
 8001538:	b2f6      	uxtb	r6, r6
 800153a:	4283      	cmp	r3, r0
 800153c:	4637      	mov	r7, r6
 800153e:	dc04      	bgt.n	800154a <__swbuf_r+0x3a>
 8001540:	4621      	mov	r1, r4
 8001542:	4628      	mov	r0, r5
 8001544:	f7ff ffbc 	bl	80014c0 <_fflush_r>
 8001548:	b9e0      	cbnz	r0, 8001584 <__swbuf_r+0x74>
 800154a:	68a3      	ldr	r3, [r4, #8]
 800154c:	3b01      	subs	r3, #1
 800154e:	60a3      	str	r3, [r4, #8]
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	6022      	str	r2, [r4, #0]
 8001556:	701e      	strb	r6, [r3, #0]
 8001558:	6962      	ldr	r2, [r4, #20]
 800155a:	1c43      	adds	r3, r0, #1
 800155c:	429a      	cmp	r2, r3
 800155e:	d004      	beq.n	800156a <__swbuf_r+0x5a>
 8001560:	89a3      	ldrh	r3, [r4, #12]
 8001562:	07db      	lsls	r3, r3, #31
 8001564:	d506      	bpl.n	8001574 <__swbuf_r+0x64>
 8001566:	2e0a      	cmp	r6, #10
 8001568:	d104      	bne.n	8001574 <__swbuf_r+0x64>
 800156a:	4621      	mov	r1, r4
 800156c:	4628      	mov	r0, r5
 800156e:	f7ff ffa7 	bl	80014c0 <_fflush_r>
 8001572:	b938      	cbnz	r0, 8001584 <__swbuf_r+0x74>
 8001574:	4638      	mov	r0, r7
 8001576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001578:	4621      	mov	r1, r4
 800157a:	4628      	mov	r0, r5
 800157c:	f000 f806 	bl	800158c <__swsetup_r>
 8001580:	2800      	cmp	r0, #0
 8001582:	d0d5      	beq.n	8001530 <__swbuf_r+0x20>
 8001584:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001588:	e7f4      	b.n	8001574 <__swbuf_r+0x64>
	...

0800158c <__swsetup_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <__swsetup_r+0xac>)
 8001590:	4605      	mov	r5, r0
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	460c      	mov	r4, r1
 8001596:	b118      	cbz	r0, 80015a0 <__swsetup_r+0x14>
 8001598:	6a03      	ldr	r3, [r0, #32]
 800159a:	b90b      	cbnz	r3, 80015a0 <__swsetup_r+0x14>
 800159c:	f7ff fa30 	bl	8000a00 <__sinit>
 80015a0:	89a3      	ldrh	r3, [r4, #12]
 80015a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015a6:	0718      	lsls	r0, r3, #28
 80015a8:	d422      	bmi.n	80015f0 <__swsetup_r+0x64>
 80015aa:	06d9      	lsls	r1, r3, #27
 80015ac:	d407      	bmi.n	80015be <__swsetup_r+0x32>
 80015ae:	2309      	movs	r3, #9
 80015b0:	602b      	str	r3, [r5, #0]
 80015b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80015b6:	81a3      	strh	r3, [r4, #12]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015bc:	e034      	b.n	8001628 <__swsetup_r+0x9c>
 80015be:	0758      	lsls	r0, r3, #29
 80015c0:	d512      	bpl.n	80015e8 <__swsetup_r+0x5c>
 80015c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015c4:	b141      	cbz	r1, 80015d8 <__swsetup_r+0x4c>
 80015c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015ca:	4299      	cmp	r1, r3
 80015cc:	d002      	beq.n	80015d4 <__swsetup_r+0x48>
 80015ce:	4628      	mov	r0, r5
 80015d0:	f7ff fb24 	bl	8000c1c <_free_r>
 80015d4:	2300      	movs	r3, #0
 80015d6:	6363      	str	r3, [r4, #52]	; 0x34
 80015d8:	89a3      	ldrh	r3, [r4, #12]
 80015da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80015de:	81a3      	strh	r3, [r4, #12]
 80015e0:	2300      	movs	r3, #0
 80015e2:	6063      	str	r3, [r4, #4]
 80015e4:	6923      	ldr	r3, [r4, #16]
 80015e6:	6023      	str	r3, [r4, #0]
 80015e8:	89a3      	ldrh	r3, [r4, #12]
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	81a3      	strh	r3, [r4, #12]
 80015f0:	6923      	ldr	r3, [r4, #16]
 80015f2:	b94b      	cbnz	r3, 8001608 <__swsetup_r+0x7c>
 80015f4:	89a3      	ldrh	r3, [r4, #12]
 80015f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80015fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015fe:	d003      	beq.n	8001608 <__swsetup_r+0x7c>
 8001600:	4621      	mov	r1, r4
 8001602:	4628      	mov	r0, r5
 8001604:	f000 f894 	bl	8001730 <__smakebuf_r>
 8001608:	89a0      	ldrh	r0, [r4, #12]
 800160a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800160e:	f010 0301 	ands.w	r3, r0, #1
 8001612:	d00a      	beq.n	800162a <__swsetup_r+0x9e>
 8001614:	2300      	movs	r3, #0
 8001616:	60a3      	str	r3, [r4, #8]
 8001618:	6963      	ldr	r3, [r4, #20]
 800161a:	425b      	negs	r3, r3
 800161c:	61a3      	str	r3, [r4, #24]
 800161e:	6923      	ldr	r3, [r4, #16]
 8001620:	b943      	cbnz	r3, 8001634 <__swsetup_r+0xa8>
 8001622:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001626:	d1c4      	bne.n	80015b2 <__swsetup_r+0x26>
 8001628:	bd38      	pop	{r3, r4, r5, pc}
 800162a:	0781      	lsls	r1, r0, #30
 800162c:	bf58      	it	pl
 800162e:	6963      	ldrpl	r3, [r4, #20]
 8001630:	60a3      	str	r3, [r4, #8]
 8001632:	e7f4      	b.n	800161e <__swsetup_r+0x92>
 8001634:	2000      	movs	r0, #0
 8001636:	e7f7      	b.n	8001628 <__swsetup_r+0x9c>
 8001638:	20000058 	.word	0x20000058

0800163c <_raise_r>:
 800163c:	291f      	cmp	r1, #31
 800163e:	b538      	push	{r3, r4, r5, lr}
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
 8001644:	d904      	bls.n	8001650 <_raise_r+0x14>
 8001646:	2316      	movs	r3, #22
 8001648:	6003      	str	r3, [r0, #0]
 800164a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800164e:	bd38      	pop	{r3, r4, r5, pc}
 8001650:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001652:	b112      	cbz	r2, 800165a <_raise_r+0x1e>
 8001654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001658:	b94b      	cbnz	r3, 800166e <_raise_r+0x32>
 800165a:	4620      	mov	r0, r4
 800165c:	f000 f830 	bl	80016c0 <_getpid_r>
 8001660:	462a      	mov	r2, r5
 8001662:	4601      	mov	r1, r0
 8001664:	4620      	mov	r0, r4
 8001666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800166a:	f000 b817 	b.w	800169c <_kill_r>
 800166e:	2b01      	cmp	r3, #1
 8001670:	d00a      	beq.n	8001688 <_raise_r+0x4c>
 8001672:	1c59      	adds	r1, r3, #1
 8001674:	d103      	bne.n	800167e <_raise_r+0x42>
 8001676:	2316      	movs	r3, #22
 8001678:	6003      	str	r3, [r0, #0]
 800167a:	2001      	movs	r0, #1
 800167c:	e7e7      	b.n	800164e <_raise_r+0x12>
 800167e:	2400      	movs	r4, #0
 8001680:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001684:	4628      	mov	r0, r5
 8001686:	4798      	blx	r3
 8001688:	2000      	movs	r0, #0
 800168a:	e7e0      	b.n	800164e <_raise_r+0x12>

0800168c <raise>:
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <raise+0xc>)
 800168e:	4601      	mov	r1, r0
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	f7ff bfd3 	b.w	800163c <_raise_r>
 8001696:	bf00      	nop
 8001698:	20000058 	.word	0x20000058

0800169c <_kill_r>:
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	4d07      	ldr	r5, [pc, #28]	; (80016bc <_kill_r+0x20>)
 80016a0:	2300      	movs	r3, #0
 80016a2:	4604      	mov	r4, r0
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	602b      	str	r3, [r5, #0]
 80016aa:	f7ff f819 	bl	80006e0 <_kill>
 80016ae:	1c43      	adds	r3, r0, #1
 80016b0:	d102      	bne.n	80016b8 <_kill_r+0x1c>
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	b103      	cbz	r3, 80016b8 <_kill_r+0x1c>
 80016b6:	6023      	str	r3, [r4, #0]
 80016b8:	bd38      	pop	{r3, r4, r5, pc}
 80016ba:	bf00      	nop
 80016bc:	200001bc 	.word	0x200001bc

080016c0 <_getpid_r>:
 80016c0:	f7ff b806 	b.w	80006d0 <_getpid>

080016c4 <_sbrk_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4d06      	ldr	r5, [pc, #24]	; (80016e0 <_sbrk_r+0x1c>)
 80016c8:	2300      	movs	r3, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	f7ff f88e 	bl	80007f0 <_sbrk>
 80016d4:	1c43      	adds	r3, r0, #1
 80016d6:	d102      	bne.n	80016de <_sbrk_r+0x1a>
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	b103      	cbz	r3, 80016de <_sbrk_r+0x1a>
 80016dc:	6023      	str	r3, [r4, #0]
 80016de:	bd38      	pop	{r3, r4, r5, pc}
 80016e0:	200001bc 	.word	0x200001bc

080016e4 <__swhatbuf_r>:
 80016e4:	b570      	push	{r4, r5, r6, lr}
 80016e6:	460c      	mov	r4, r1
 80016e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016ec:	2900      	cmp	r1, #0
 80016ee:	b096      	sub	sp, #88	; 0x58
 80016f0:	4615      	mov	r5, r2
 80016f2:	461e      	mov	r6, r3
 80016f4:	da0d      	bge.n	8001712 <__swhatbuf_r+0x2e>
 80016f6:	89a3      	ldrh	r3, [r4, #12]
 80016f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016fc:	f04f 0100 	mov.w	r1, #0
 8001700:	bf0c      	ite	eq
 8001702:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001706:	2340      	movne	r3, #64	; 0x40
 8001708:	2000      	movs	r0, #0
 800170a:	6031      	str	r1, [r6, #0]
 800170c:	602b      	str	r3, [r5, #0]
 800170e:	b016      	add	sp, #88	; 0x58
 8001710:	bd70      	pop	{r4, r5, r6, pc}
 8001712:	466a      	mov	r2, sp
 8001714:	f000 f848 	bl	80017a8 <_fstat_r>
 8001718:	2800      	cmp	r0, #0
 800171a:	dbec      	blt.n	80016f6 <__swhatbuf_r+0x12>
 800171c:	9901      	ldr	r1, [sp, #4]
 800171e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001722:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001726:	4259      	negs	r1, r3
 8001728:	4159      	adcs	r1, r3
 800172a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172e:	e7eb      	b.n	8001708 <__swhatbuf_r+0x24>

08001730 <__smakebuf_r>:
 8001730:	898b      	ldrh	r3, [r1, #12]
 8001732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001734:	079d      	lsls	r5, r3, #30
 8001736:	4606      	mov	r6, r0
 8001738:	460c      	mov	r4, r1
 800173a:	d507      	bpl.n	800174c <__smakebuf_r+0x1c>
 800173c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001740:	6023      	str	r3, [r4, #0]
 8001742:	6123      	str	r3, [r4, #16]
 8001744:	2301      	movs	r3, #1
 8001746:	6163      	str	r3, [r4, #20]
 8001748:	b002      	add	sp, #8
 800174a:	bd70      	pop	{r4, r5, r6, pc}
 800174c:	ab01      	add	r3, sp, #4
 800174e:	466a      	mov	r2, sp
 8001750:	f7ff ffc8 	bl	80016e4 <__swhatbuf_r>
 8001754:	9900      	ldr	r1, [sp, #0]
 8001756:	4605      	mov	r5, r0
 8001758:	4630      	mov	r0, r6
 800175a:	f7ff facb 	bl	8000cf4 <_malloc_r>
 800175e:	b948      	cbnz	r0, 8001774 <__smakebuf_r+0x44>
 8001760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001764:	059a      	lsls	r2, r3, #22
 8001766:	d4ef      	bmi.n	8001748 <__smakebuf_r+0x18>
 8001768:	f023 0303 	bic.w	r3, r3, #3
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	81a3      	strh	r3, [r4, #12]
 8001772:	e7e3      	b.n	800173c <__smakebuf_r+0xc>
 8001774:	89a3      	ldrh	r3, [r4, #12]
 8001776:	6020      	str	r0, [r4, #0]
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	81a3      	strh	r3, [r4, #12]
 800177e:	9b00      	ldr	r3, [sp, #0]
 8001780:	6163      	str	r3, [r4, #20]
 8001782:	9b01      	ldr	r3, [sp, #4]
 8001784:	6120      	str	r0, [r4, #16]
 8001786:	b15b      	cbz	r3, 80017a0 <__smakebuf_r+0x70>
 8001788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800178c:	4630      	mov	r0, r6
 800178e:	f000 f81d 	bl	80017cc <_isatty_r>
 8001792:	b128      	cbz	r0, 80017a0 <__smakebuf_r+0x70>
 8001794:	89a3      	ldrh	r3, [r4, #12]
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	81a3      	strh	r3, [r4, #12]
 80017a0:	89a3      	ldrh	r3, [r4, #12]
 80017a2:	431d      	orrs	r5, r3
 80017a4:	81a5      	strh	r5, [r4, #12]
 80017a6:	e7cf      	b.n	8001748 <__smakebuf_r+0x18>

080017a8 <_fstat_r>:
 80017a8:	b538      	push	{r3, r4, r5, lr}
 80017aa:	4d07      	ldr	r5, [pc, #28]	; (80017c8 <_fstat_r+0x20>)
 80017ac:	2300      	movs	r3, #0
 80017ae:	4604      	mov	r4, r0
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	602b      	str	r3, [r5, #0]
 80017b6:	f7fe fff2 	bl	800079e <_fstat>
 80017ba:	1c43      	adds	r3, r0, #1
 80017bc:	d102      	bne.n	80017c4 <_fstat_r+0x1c>
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	b103      	cbz	r3, 80017c4 <_fstat_r+0x1c>
 80017c2:	6023      	str	r3, [r4, #0]
 80017c4:	bd38      	pop	{r3, r4, r5, pc}
 80017c6:	bf00      	nop
 80017c8:	200001bc 	.word	0x200001bc

080017cc <_isatty_r>:
 80017cc:	b538      	push	{r3, r4, r5, lr}
 80017ce:	4d06      	ldr	r5, [pc, #24]	; (80017e8 <_isatty_r+0x1c>)
 80017d0:	2300      	movs	r3, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	602b      	str	r3, [r5, #0]
 80017d8:	f7fe fff1 	bl	80007be <_isatty>
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	d102      	bne.n	80017e6 <_isatty_r+0x1a>
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	b103      	cbz	r3, 80017e6 <_isatty_r+0x1a>
 80017e4:	6023      	str	r3, [r4, #0]
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
 80017e8:	200001bc 	.word	0x200001bc

080017ec <_init>:
 80017ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ee:	bf00      	nop
 80017f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f2:	bc08      	pop	{r3}
 80017f4:	469e      	mov	lr, r3
 80017f6:	4770      	bx	lr

080017f8 <_fini>:
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fa:	bf00      	nop
 80017fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fe:	bc08      	pop	{r3}
 8001800:	469e      	mov	lr, r3
 8001802:	4770      	bx	lr
